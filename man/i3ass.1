.nh
.TH I3ASS 1 2021-09-12 Linux "User Manuals"
.SH NAME
.PP
\fB\fCi3ass\fR - i3 assistance scripts

.PP
arbe


.SH \fB\fCi3flip\fR - Tabswitching done right
.SH SYNOPSIS
.PP
.RS

.nf
i3flip [--move|-m] [--json JSON] [--verbose] [--dryrun] DIRECTION
i3flip --help|-h
i3flip --version|-v

.fi
.RE

.SH DESCRIPTION
.PP
\fB\fCi3flip\fR switch containers without leaving the
parent. Perfect for tabbed or stacked layout, but
works on all layouts. If direction is \fB\fCnext\fR and
the active container is the last, the first
container will get focused.

.PP
\fBDIRECTION\fP can be either \fIprev\fP or \fInext\fP,
which can be defined with different words:

.PP
\fBnext\fP|right|down|n|r|d
.br
\fBprev\fP|left|up|p|l|u

.SH OPTIONS
.PP
\fB\fC--move\fR|\fB\fC-m\fR
.br
Move the current container instead of changing
focus.

.PP
\fB\fC--json\fR JSON
.br
use JSON instead of output from  \fB\fCi3-msg -t
get_tree\fR

.PP
\fB\fC--verbose\fR
.br
Print more information to \fBstderr\fP\&.

.PP
\fB\fC--dryrun\fR
.br
Don't execute any \fIi3 commands\fP\&.

.PP
\fB\fC--help\fR|\fB\fC-h\fR
.br
Show help and exit.

.PP
\fB\fC--version\fR|\fB\fC-v\fR
.br
Show version and exit.

.SH EXAMPLES
.PP
\fB\fC~/.config/i3/config\fR:

.PP
.RS

.nf
\&...
bindsym Mod4+Tab         exec --no-startup-id i3flip next
bindsym Mod4+Shift+Tab   exec --no-startup-id i3flip prev

.fi
.RE

.SH DEPENDENCIES
.PP
\fB\fCi3\fR \fB\fCi3viswiz\fR


.SH \fB\fCi3fyra\fR - An advanced, simple grid-based tiling layout
.SH SYNOPSIS
.PP
.RS

.nf
i3fyra --show|-s CONTAINER [--force|-f]
i3fyra --float|-a
i3fyra --hide|-z CONTAINER [--force|-f]
i3fyra --layout|-l LAYOUT [--force|-f] [--array ARRAY] [--verbose] [--dryrun]
i3fyra --move|-m DIRECTION|CONTAINER [--conid|-n ID] [--force|-f] [--speed|-p INT]
i3fyra --help|-h
i3fyra --version|-v

.fi
.RE

.SH DESCRIPTION
.PP
The layout consists of four containers:

.PP
.RS

.nf
  A B
  C D

.fi
.RE

.PP
A container can contain one or more windows. The
internal layout of the containers doesn't matter.
By default the layout of each container is tabbed.

.PP
A is always to the left of B and D. And always
above C. B is always to the right of A and C. And
always above D.

.PP
This means that the containers will change names
if their position changes.

.PP
The size of the containers are defined by the
three splits: AB, AC and BD.

.PP
Container A and C belong to one family.
.br
Container B and D belong to one family.

.PP
The visibility of containers and families can be
toggled. Not visible containers are placed on the
scratchpad.

.PP
The visibility is toggled by either using
\fB\fC--show\fR or \fB\fC--hide\fR\&. But more often by moving a
container in an \fIimpossible\fP direction,(\fIsee
examples below\fP).

.PP
The \fBi3fyra\fP layout is only active on one
workspace. That workspace can be set with the
environment variable: \fB\fCi3FYRA_WS\fR, otherwise the
workspace active when the layout is created will
be used.

.PP
The benefit of using this layout is that the
placement of windows is more predictable and
easier to control. Especially when using tabbed
containers, which are very clunky to use with
\fIdefault i3\fP\&.

.SH OPTIONS
.PP
\fB\fC--show\fR|\fB\fC-s\fR CONTAINER
.br
Show target container. If it doesn't exist, it
will be created and current window will be put in
it. If it is visible, nothing happens.

.PP
\fB\fC--force\fR|\fB\fC-f\fR
.br
If set virtual positions will be ignored.

.PP
\fB\fC--float\fR|\fB\fC-a\fR
.br
Autolayout. If current window is tiled: floating
enabled If window is floating, it will be put in a
visible container. If there is no visible
containers. The window will be placed in a hidden
container. If no containers exist, container
'A'will be created and the window will be put
there.

.PP
\fB\fC--hide\fR|\fB\fC-z\fR CONTAINER
.br
Hide target containers if visible.

.PP
\fB\fC--layout\fR|\fB\fC-l\fR LAYOUT
.br
alter splits Changes the given splits. INT is a
distance in pixels. AB is on X axis from the left
side if INT is positive, from the right side if it
is negative. AC and BD is on Y axis from the top
if INT is positive, from the bottom if it is
negative. The whole argument needs to be quoted.
Example:
.br
\fB\fC$ i3fyra --layout 'AB=-300 BD=420'\fR

.PP
\fB\fC--array\fR ARRAY
.br
ARRAY should be the output of \fB\fCi3list\fR\&. It is
used to improve speed when \fBi3fyra\fP is executed
from a script that already have the array, f.i.
\fBi3run\fP and \fBi3Kornhe\fP\&.

.PP
\fB\fC--verbose\fR
.br
If set information about execution will be
printed to \fBstderr\fP\&.

.PP
\fB\fC--dryrun\fR
.br
If set no window manipulation will be done during
execution.

.PP
\fB\fC--move\fR|\fB\fC-m\fR CONTAINER
.br
Moves current window to target container, either
defined by it's name or it's position relative to
the current container with a direction:
[\fB\fCl\fR|\fB\fCleft\fR][\fB\fCr\fR|\fB\fCright\fR][\fB\fCu\fR|\fB\fCup\fR][\fB\fCd\fR|\fB\fCdown\fR] If
the container doesnt exist it is created. If
argument is a direction and there is no container
in that direction, Connected container(s)
visibility is toggled. If current window is
floating or not inside ABCD, normal movement is
performed. Distance for moving floating windows
with this action can be defined with the \fB\fC--speed\fR
option. Example: \fB\fC$ i3fyra --speed 30 -m r\fR Will
move current window 30 pixels to the right, if it
is floating.

.PP
\fB\fC--conid\fR|\fB\fC-n\fR ID
.br
To set the target window for operations. If not
set the active window will be used.

.PP
\fB\fC--speed\fR|\fB\fC-p\fR INT
.br
Distance in pixels to move a floating window.
Defaults to 30.

.PP
\fB\fC--help\fR|\fB\fC-h\fR
.br
Show help and exit.

.PP
\fB\fC--version\fR|\fB\fC-v\fR
.br
Show version and exit

.SH EXAMPLES
.PP
If containers \fBA\fP,\fBB\fP and \fBC\fP are visible
but \fBD\fP is hidden or none existent, the visible
layout would looks like this:

.PP
.RS

.nf
  A B
  C B

.fi
.RE

.PP
If action: \fB\fC--move up\fR would be executed when
container \fBB\fP is active and \fBD\fP is hidden.
Container \fBD\fP would be shown. If action would
have been: \fB\fC--move down\fR, \fBD\fP would be shown but
\fBB\fP would be placed below \fBD\fP, this means that
the containers will also swap names. If action
would have been \fB\fC--move left\fR the active window in
B would be moved to container \fBA\fP\&. If action was
\fB\fC--move right\fR, \fBA\fP and \fBC\fP would be hidden:

.PP
.RS

.nf
  B B
  B B

.fi
.RE

.PP
If we now \fB\fC--move left\fR, \fBA\fP and \fBC\fP would be
shown again but to the right of \fBB\fP, the
containers would also change names, so \fBB\fP
becomes \fBA\fP, \fBA\fP becomes \fBB\fP and \fBC\fP
becomes \fBD\fP:

.PP
.RS

.nf
  A B
  A D

.fi
.RE

.PP
If this doesn't make sense, check out this
demonstration on youtube:
https://youtu.be/kU8gb6WLFk8

.SH ENVIRONMENT
.PP
\fB\fCI3FYRA_MAIN_CONTAINER\fR
.br
This container will be the chosen when a
container is requested but not given. When using
the command autolayout (\fB\fC-a\fR) for example, if the
window is floating it will be sent to the main
container, if no other containers exist. Defaults
to A. defaults to: A

.PP
\fB\fCI3FYRA_WS\fR
.br
Workspace to use for i3fyra. If not set, the firs
workspace that request to create the layout will
be used. defaults to:

.PP
\fB\fCI3FYRA_ORIENTATION\fR
.br
If set to \fB\fCvertical\fR main split will be \fB\fCAC\fR and
families will be \fB\fCAB\fR and \fB\fCCD\fR\&. Otherwise main
split will be \fB\fCAB\fR and families will be \fB\fCAC\fR and
\fB\fCBD\fR\&. defaults to: horizontal

.PP
\fB\fCXDG_RUNTIME_DIR\fR

.PP
defaults to: /tmp

.PP
\fB\fCI3_KING_PID_FILE\fR
.br
When i3king is running this file contains the pid
of the i3king process. It is used by \fBi3fyra\fP to
know if i3king is running, if it is, it will try
to match windows against the rules when \fB\fC--float\fR
option toggles the floating state to tiled.
defaults to: $XDG_RUNTIME_DIR/i3ass/i3king.pid

.SH DEPENDENCIES
.PP
\fB\fCbash\fR \fB\fCgawk\fR \fB\fCi3\fR \fB\fCi3list\fR \fB\fCi3var\fR \fB\fCi3viswiz\fR
\fB\fCi3king\fR


.SH \fB\fCi3get\fR - prints info about a specific window to stdout
.SH SYNOPSIS
.PP
.RS

.nf
i3get [--class|-c CLASS] [--instance|-i INSTANCE] [--title|-t TITLE] [--conid|-n CON_ID] [--id|-d WIN_ID] [--mark|-m MARK] [--titleformat|-o TITLE_FORMAT] [--active|-a] [--synk|-y] [--print|-r OUTPUT] [--json TREE]
i3get --help|-h
i3get --version|-v

.fi
.RE

.SH DESCRIPTION
.PP
Search for \fB\fCCRITERIA\fR in the output of \fB\fCi3-msg -t
get_tree\fR, return desired information. If no
arguments are passed, \fB\fCcon_id\fR of active window is
returned. If there is more then one criterion, all
of them must be true to get results.

.SH OPTIONS
.PP
\fB\fC--class\fR|\fB\fC-c\fR CLASS
.br
Search for windows with the given class

.PP
\fB\fC--instance\fR|\fB\fC-i\fR INSTANCE
.br
Search for windows with the given instance

.PP
\fB\fC--title\fR|\fB\fC-t\fR TITLE
.br
Search for windows with title.

.PP
\fB\fC--conid\fR|\fB\fC-n\fR CON_ID
.br
Search for windows with the given con_id

.PP
\fB\fC--id\fR|\fB\fC-d\fR WIN_ID
.br
Search for windows with the given window id

.PP
\fB\fC--mark\fR|\fB\fC-m\fR MARK
.br
Search for windows with the given mark

.PP
\fB\fC--titleformat\fR|\fB\fC-o\fR TITLE_FORMAT
.br
Search for windows with the given titleformat

.PP
\fB\fC--active\fR|\fB\fC-a\fR
.br
Currently active window (default)

.PP
\fB\fC--synk\fR|\fB\fC-y\fR
.br
Synch on. If this option is included,  script
will wait till target window exist. (\fIor timeout
after 60 seconds\fP).

.PP
\fB\fC--print\fR|\fB\fC-r\fR OUTPUT
.br
\fIOUTPUT\fP can be one or more of the following
characters:

.TS
allbox;
l l l 
l l l .
\fB\fCcharacter\fR	\fB\fCprint\fR	\fB\fCreturn\fR
\fB\fCt\fR	title	string
\fB\fCc\fR	class	string
\fB\fCi\fR	instance	string
\fB\fCd\fR	Window ID	INT
\fB\fCn\fR	Con_Id (default)	INT
\fB\fCm\fR	mark	JSON list
\fB\fCw\fR	workspace	INT
\fB\fCa\fR	is active	true or false
\fB\fCf\fR	floating state	string
\fB\fCo\fR	title format	string
\fB\fCe\fR	fullscreen	1 or 0
\fB\fCs\fR	sticky	true or false
\fB\fCu\fR	urgent	true or false
\fB\fCy\fR	window_type	string
\fB\fCr\fR	window_role	string
.TE

.PP
Each character in OUTPUT will be tested and the
return value will be printed on a new line. If no
value is found, \fB\fC--i3get could not find:
CHARACTER\fR will get printed.

.PP
In the example below, the target window did not
have a mark:

.PP
.RS

.nf
$ i3get -r tfcmw
/dev/pts/9
user_off
URxvt
--i3get could not find: m
1

.fi
.RE

.PP
\fB\fC--json\fR TREE
.br
Use TREE instead of the output of
.br
\fB\fCi3-msg -t get_tree\fR

.PP
\fB\fC--help\fR|\fB\fC-h\fR
.br
Show help and exit.

.PP
\fB\fC--version\fR|\fB\fC-v\fR
.br
Show version and exit

.SH EXAMPLES
.PP
search for window with instance name
sublime_text.  Request workspace, title and
floating state.

.PP
.RS

.nf
$ i3get --instance sublime_text --print wtf 
1
~/src/bash/i3ass/i3get (i3ass) - Sublime Text
user_off

.fi
.RE

.SH DEPENDENCIES
.PP
\fB\fCbash\fR \fB\fCi3\fR \fB\fCgawk\fR


.SH \fB\fCi3gw\fR - a ghost window wrapper for i3wm
.SH SYNOPSIS
.PP
.RS

.nf
i3gw MARK
i3gw --help|-h
i3gw --version|-v

.fi
.RE

.SH DESCRIPTION
.PP
\fB\fCi3-msg\fR has an undocumented function: \fIopen\fP,
it creates empty containers,  or as I call them:
ghosts.  Since these empty containers doesn't
contain any windows  there is no
instance/class/title to identify them,  making it
difficult to manage them.  They do however have a
\fB\fCcon_id\fR  and I found that the easiest way to keep
track of ghosts, is to mark them.  That is what
this script does,  it creates a ghost,  get its
\fB\fCcon_id\fR and marks it.

.SH OPTIONS
.PP
\fB\fC--help\fR|\fB\fC-h\fR
.br
Show help and exit.

.PP
\fB\fC--version\fR|\fB\fC-v\fR
.br
Show version and exit.

.SH EXAMPLES
.PP
\fB\fC$ i3gw casper\fR

.PP
this will create a ghost marked casper,  you can
perform any action you can perform on a regular
container.

.PP
.RS

.nf
$ i3-msg [con_mark=casper] move to workspace 2
$ i3-msg [con_mark=casper] split v
$ i3-msg [con_mark=casper] layout tabbed
$ i3-msg [con_mark=casper] kill

.fi
.RE

.PP
the last command (\fB\fCkill\fR), destroys the
container.

.SH DEPENDENCIES
.PP
\fB\fCi3\fR


.SH \fB\fCi3king\fR - window ruler
.SH SYNOPSIS
.PP
.RS

.nf
i3king [--config|-c FILE] [--no-apply] [--no-restart]
i3king --apply|-a [--config|-c FILE]
i3king --conid|-n CONID [--print-commands] [--config|-c FILE]
i3king --json JSON [--verbose] [--dryrun] [--log FILE]
i3king --help|-h
i3king --version|-v

.fi
.RE

.SH DESCRIPTION
.PP
i3king will match all \fBnew\fP windows against the
rules defined in \fBI3_KING_RULE_FILE\fP
(\fI\fB\fC~/.config/i3king/rules\fR\fP). If a rule matches
the created window, the command associated with
the rule will get passed to \fB\fCi3-msg\fR\&.

.PP
The criterias a window can get matched against
are
.br
- \fBclass\fP

.RS
.IP \(bu 2
\fBinstance\fP
.IP \(bu 2
\fBtitle\fP
.IP \(bu 2
\fBwindow_type\fP
.IP \(bu 2
\fBwindow_role\fP

.RE

.PP
Use \fBGLOBAL\fP rules to match any windows. global
rules can have a \fBblack\fPlist for windows that
will not trigger the rule.

.PP
A variant of the GLOBAL rule is \fBDEFAULT\fP
rules, which works exactly like GLOBAL rules,
except they only get triggered if the window
didn't match any \fI"normal"\fP rules (regular GLOBAL
rules are normal).

.PP
\fBON_CLOSE\fP work like normal rules but will only
trigger when a window is closed.

.PP
Just like in the i3 config the \fB\fCset\fR directive is
available, so you can make variables.

.PP
Some built in magic variables are avaible in the
config:

.RS
.IP \(bu 2
$INSTANCE
.IP \(bu 2
$CLASS
.IP \(bu 2
$CONID
.IP \(bu 2
$WINID

.RE

.SH EXAMPLE
.PP
.RS

.nf
GLOBAL \\
  class=URxvt instance=htop, \\
  instance=firefox
    title_format $INSTANCE

.fi
.RE

.PP
The above rule will set the title_format to the
instance name of all windows, except a URxvt
window with the instance name htop, and firefox
windows.

.PP
If $I3_KING_RULES_FILE doesn't exist, a example
rule file will get created. See that file for
details about the syntax.

.PP
If you used to have \fB\fCfor_window\fR rules that
triggered \fB\fCi3fyra --move\fR commands. It is
recommended to use the built in varialbe
\fB$CONID\fP when executing i3fyra:

.SH EXAMPLE
.PP
.RS

.nf
# old i3 version:
for_window [instance=qutebrowser] exec --no-startup-id i3fyra --move C

# with i3 king:
instance=qutebrowser
  exec --no-startup-id i3fyra --conid $CONID --move C

.fi
.RE

.PP
(\fIthe \fB\fC--conid\fR option in i3fyra is brand new\fP)

.PP
If the \fB\fCrestart\fR command is issued from i3, all
windows lose gets new container IDs, marks are
lost and other more or less strange things might
happen to the layout. Another thing is that all
open IPC sockets are closed and this means that
any ipc subscriber would have to be restarted.
\fBi3king\fP will, when the socket is broken, match
all known windows against the rules again, and
automatically restart itself. If you for some
reason don't want this behaviour, try \fB\fC--no-
restart\fR and/or \fB\fC--no-apply\fR options.

.SH OPTIONS
.PP
\fB\fC--config\fR|\fB\fC-c\fR FILE
.br
Override the value of the Environment variable
\fBI3_KING_RULE_FILE\fP . Or the default value:
.br
\fB\fC~/.config/i3king/rules\fR

.PP
\fB\fC--no-apply\fR
.br
If this option is set it will not automatically
apply rules to all windows when the IPC socket is
broken (happens on a crash or on \fB\fCrestart\fR). This
option has no effect if \fB\fC--no-restart\fR is used.

.PP
\fB\fC--no-restart\fR
.br
When the IPC socket is broken, i3king will
automatically restart if this option is not set.

.PP
\fB\fC--apply\fR|\fB\fC-a\fR
.br
Match all existing windows against the rules and
exit.

.PP
\fB\fC--conid\fR|\fB\fC-n\fR CONID
.br
will match window with CONID against the rules
and exit.

.PP
\fB\fC--print-commands\fR
.br
Print commands to STDOUT instead of executing
them.

.PP
\fB\fC--json\fR JSON
.br
Parse JSON instead of the output from: \fB\fCi3-msg -t
subscribe\fR

.PP
\fB\fC--verbose\fR
.br
More verbose output to \fBSTDERR\fP\&.

.PP
\fB\fC--dryrun\fR
.br
Parse rules but don't execute commands.

.PP
\fB\fC--log\fR FILE
.br
Same as verbose but the output is printed to FILE
instead.

.PP
\fB\fC--help\fR|\fB\fC-h\fR
.br
Show help and exit.

.PP
\fB\fC--version\fR|\fB\fC-v\fR
.br
Show version and exit.

.SH ENVIRONMENT
.PP
\fB\fCXDG_CONFIG_HOME\fR

.PP
defaults to: $HOME/.config

.PP
\fB\fCXDG_RUNTIME_DIR\fR

.PP
defaults to: /tmp

.PP
\fB\fCI3_KING_RULE_FILE\fR
.br
Path to file containing rules to be parsed.
defaults to: $XDG_CONFIG_HOME/i3king/rules

.PP
\fB\fCI3_KING_PID_FILE\fR
.br
When i3king is running this file contains the pid
of the i3king process. It is used by \fBi3fyra\fP to
know if i3king is running, if it is, it will try
to match windows against the rules when \fB\fC--float\fR
option toggles the floating state to tiled.
defaults to: $XDG_RUNTIME_DIR/i3ass/i3king.pid

.SH DEPENDENCIES
.PP
\fB\fCbash\fR \fB\fCi3-msg\fR \fB\fCgawk\fR \fB\fCi3get\fR


.SH \fB\fCi3Kornhe\fR - move and resize windows gracefully
.SH SYNOPSIS
.PP
.RS

.nf
i3Kornhe DIRECTION [--verbose] [--array ARRAY] [--json JSON]
i3Kornhe move [--speed|-p SPEED] [DIRECTION]
i3Kornhe size [--speed|-p SPEED] [DIRECTION]
i3Kornhe 1-9 [--margin INT] [--margin-top INT] [--margin-bottom INT] [--margin-left INT] [--margin-right INT]
i3Kornhe x
i3Kornhe --help|-h
i3Kornhe --version|-v

.fi
.RE

.SH DESCRIPTION
.PP
i3Kornhe provides an alternative way to move and
resize windows in \fBi3\fP\&. It has some more
functions then the defaults and is more
streamlined. Resizing floating windows is done by
first selecting a corner of the window, and then
moving that corner.

.SH USAGE
.PP
To use this script a bindingmode
\[la]https://i3wm.org/docs/userguide.html#binding_modes\[ra] named
\fB\fCsizemode\fR needs to be set in your i3 config file.
Below is how I have set up this mode:

.PP
\fB\fC~/.config/i3/config\fR

.PP
.RS

.nf
# these keybindings are outside the mode definition

# group A, enter size mode with direction:
bindsym $mod+Control+Left    exec --no-startup-id i3Kornhe size --speed 30 left
bindsym $mod+Control+Down    exec --no-startup-id i3Kornhe size --speed 30 down
bindsym $mod+Control+Up      exec --no-startup-id i3Kornhe size --speed 30 up
bindsym $mod+Control+Right   exec --no-startup-id i3Kornhe size --speed 30 right

# group B, enter move mode with direction:
# by using speed 0 (--speed 0), this will only enter the mode without
# moving the window.
bindsym $mod+Shift+Left      exec --no-startup-id i3Kornhe move --speed 0 left
bindsym $mod+Shift+Down      exec --no-startup-id i3Kornhe move --speed 0 down
bindsym $mod+Shift+Up        exec --no-startup-id i3Kornhe move --speed 0 up
bindsym $mod+Shift+Right     exec --no-startup-id i3Kornhe move --speed 0 right

mode "sizemode" {
  # group 1 only send direction speed 30:
  bindsym Left          exec --no-startup-id i3Kornhe --speed 30 left
  bindsym Down          exec --no-startup-id i3Kornhe --speed 30 down
  bindsym Up            exec --no-startup-id i3Kornhe --speed 30 up
  bindsym Right         exec --no-startup-id i3Kornhe --speed 30 right
  
  # group 2 only send direction speed 5:
  bindsym Shift+Left    exec --no-startup-id i3Kornhe --speed 5 left
  bindsym Shift+Down    exec --no-startup-id i3Kornhe --speed 5 down
  bindsym Shift+Up      exec --no-startup-id i3Kornhe --speed 5 up
  bindsym Shift+Right   exec --no-startup-id i3Kornhe --speed 5 right

  # group 3 change size direction:
  bindsym $mod+Control+Left     exec --no-startup-id i3Kornhe size left
  bindsym $mod+Control+Down     exec --no-startup-id i3Kornhe size down
  bindsym $mod+Control+Up       exec --no-startup-id i3Kornhe size up
  bindsym $mod+Control+Right    exec --no-startup-id i3Kornhe size right

  # group 4 enter move mode:
  bindsym m exec --no-startup-id i3Kornhe move --speed 0 left

  # group 5 move to absolute position 1-9:
  bindsym 1 exec --no-startup-id i3Kornhe 1
  bindsym 2 exec --no-startup-id i3Kornhe 2
  bindsym 3 exec --no-startup-id i3Kornhe 3
  bindsym 4 exec --no-startup-id i3Kornhe 4
  bindsym 5 exec --no-startup-id i3Kornhe 5
  bindsym 6 exec --no-startup-id i3Kornhe 6
  bindsym 7 exec --no-startup-id i3Kornhe 7
  bindsym 8 exec --no-startup-id i3Kornhe 8
  bindsym 9 exec --no-startup-id i3Kornhe 9

  # group 6 exit the mode
  bindsym Escape exec --no-startup-id i3Kornhe x
}

.fi
.RE

.PP
As you can see there are a lot of keybinding
definitions, but keep in mind, without \fB\fCi3Kornhe\fR
you would need, one mode for every direction and
action (at least 8). And one reason i made this
script was to unclutter and shrink my own config
file.

.PP
A tip is also to use variables in the i3config:

.PP
.RS

.nf
set $super bindsym Mod4
set $i3Kornhe exec --no-startup-id i3Kornhe

.fi
.RE

.PP
.RS

.nf
before:  
bindsym $mod+Right exec --no-startup-id i3Kornhe move --speed 0 right

after:  
$super+Right $i3Kornhe m -p 0 r

.fi
.RE

.PP
\fINotice that the first character of the
mode/direction is enough.\fP

.PP
Let us go through the processes that will happen
when the different actions are executed.

.PP
\fIgroup B:\fP
.br
\fB\fC$super+Left $i3Kornhe move --speed 0 left\fR

.PP
This will make i3Kornhe enter \fBmove mode\fP\&. (*it
will actually activate the i3 mode sizemode,
\fBmove\fP is a pseudo mode that only i3Korhne
knows*) First thing i3Kornhe does is to store the
current title_format of the window.

.PP
It will then set the \fB\fCtitle_format\fR to:
.br
\fB\fCMOVE w:WIDTH h:HEIGHT x:X y:Y\fR

.PP
Populated with the actual dimensions and position
of the window. The first word, "MOVE", in the
title means that we don't need to specify the mode
(move|size|m|s)

.PP
So if a keybinding from \fBgroup 1\fP or \fBgroup
2\fP is executed it will move the window in the
specified direction with the specified speed
(speed defaults to 10 if not set).

.PP
If we would execute a keybinding from \fBgroup
3\fP, where the mode is specified (size), this
would change the title to:

.PP
\fB\fCSIZE CORNER\fR

.PP
CORNER is which corner of the window that will
get moved. The CORNER is set with a direction:

.TS
allbox;
l l 
l l .
\fB\fCdirection\fR	\fB\fCcorner\fR
Left	topleft
Down	bottomleft
Up	topright
Right	bottomright
.TE

.PP
This might look strange at first, but if you look
at the keys HJKL, you will see that there is some
logic to it.

.PP
If we now execute a keybinding from \fB\fIgroup 1\fP\fP
or \fB\fIgroup 2\fP\fP (without a mode definition), the
named corner will \fIget moved\fP\&. To change corner
execute a keybinding from \fBgroup 3\fP\&. To switch
back to MOVE mode, we only need a single
keybinding (\fBgroup 4\fP):  \fB\fCbindsym m $i3Kornhe m
--speed 0 l\fR

.PP
The direction and speed is needed but will not
have any visual effect. To exit back to default
mode execute \fB\fCi3Kornhe\fR with \fB\fCx\fR as the only
argument, (\fBgroup 6\fP), this will exit the mode
and reset the title_format to what it was
initially.

.PP
You can also execute \fB\fCi3Kornhe\fR with a number in
the range 1-9 as a single argument. This will move
the currently active window (if window is
floating) to the position corresponding to the
number:

.PP
.RS

.nf
123
456
789

.fi
.RE

.PP
One important note is that if the active window
is tiled, \fB\fCi3Kornhe\fR will move it normally* or
resize it according to this table:

.TS
allbox;
l l 
l l .
\fB\fCdirection\fR	\fB\fCresize\fR
Left	shrink width
Down	shrink height
Up	grow height
Right	grow width
.TE

.PP
* *except if the tiled window is on a \fBi3fyra\fP
workspace, if it is, i3fyra --move operation will
applied*.

.SH OPTIONS
.PP
\fB\fC--verbose\fR

.PP
\fB\fC--array\fR ARRAY

.PP
\fB\fC--json\fR JSON

.PP
\fB\fC--speed\fR|\fB\fC-p\fR SPEED
.br
Sets speed or distance in pixels to use when
moving and resizing the windows.

.PP
\fB\fC--margin\fR INT

.PP
\fB\fC--margin-top\fR INT
.br
Override the top-margin value. Defaults to the
value of \fB\fC--margin\fR (which is 5)

.PP
\fB\fC--margin-bottom\fR INT
.br
Override the bottom-margin value. Defaults to the
value of \fB\fC--margin\fR (which is 5)

.PP
\fB\fC--margin-left\fR INT
.br
Override the left-margin value. Defaults to the
value of \fB\fC--margin\fR (which is 5)

.PP
\fB\fC--margin-right\fR INT
.br
Override the right-margin value. Defaults to the
value of \fB\fC--margin\fR (which is 5)

.PP
\fB\fC--help\fR|\fB\fC-h\fR
.br
Show help and exit.

.PP
\fB\fC--version\fR|\fB\fC-v\fR
.br
Show version and exit.

.SH ENVIRONMENT
.PP
\fB\fCXDG_RUNTIME_DIR\fR

.PP
defaults to: /tmp

.PP
\fB\fCI3_KORNHE_FIFO_FILE\fR

.PP
defaults to: $XDG_RUNTIME_DIR/i3ass/i3Kornhe.fifo

.SH DEPENDENCIES
.PP
\fB\fCbash\fR \fB\fCi3\fR \fB\fCi3list\fR


.SH \fB\fCi3list\fR - list information about the current i3 session.
.SH SYNOPSIS
.PP
.RS

.nf
i3list [--json JSON]
i3list --instance|-i TARGET [--json JSON]
i3list --class|-c    TARGET [--json JSON]
i3list --conid|-n    TARGET [--json JSON]
i3list --winid|-d    TARGET [--json JSON]
i3list --mark|-m     TARGET [--json JSON]
i3list --title|-t    TARGET [--json JSON]
i3list --help|-h
i3list --version|-v

.fi
.RE

.SH DESCRIPTION
.PP
\fB\fCi3list\fR prints a list in a \fIarray\fP formatted
list.  If a search criteria is given
(\fB\fC-c\fR|\fB\fC-i\fR|\fB\fC-n\fR|\fB\fC-d\fR|\fB\fC-m\fR)  information about the
first window matching the criteria is displayed.
Information about the active window is always
displayed.  If no search criteria is given,  the
active window will also be the target window.

.PP
By using eval,  the output can be used as an
array in bash scripts,  but the array needs to be
declared first.

.SH OPTIONS
.PP
\fB\fC--json\fR JSON
.br
use JSON instead of output from  \fB\fCi3-msg -t
get_tree\fR

.PP
\fB\fC--instance\fR|\fB\fC-i\fR TARGET
.br
Search for windows with a instance matching
\fITARGET\fP

.PP
\fB\fC--class\fR|\fB\fC-c\fR TARGET
.br
Search for windows with a class matching \fITARGET\fP

.PP
\fB\fC--conid\fR|\fB\fC-n\fR TARGET
.br
Search for windows with a \fBCON_ID\fP matching
\fITARGET\fP

.PP
\fB\fC--winid\fR|\fB\fC-d\fR TARGET
.br
Search for windows with a \fBWINDOW_ID\fP matching
\fITARGET\fP

.PP
\fB\fC--mark\fR|\fB\fC-m\fR TARGET
.br
Search for windows with a \fBmark\fP matching
\fITARGET\fP

.PP
\fB\fC--title\fR|\fB\fC-t\fR TARGET
.br
Search for windows with a \fBtitle\fP matching
\fITARGET\fP

.PP
\fB\fC--help\fR|\fB\fC-h\fR
.br
Show help and exit.

.PP
\fB\fC--version\fR|\fB\fC-v\fR
.br
Show version and exit.

.SH EXAMPLES
.PP
.RS

.nf
i3list[AWF]=0                  # Active Window floating
i3list[ATW]=270                # Active Window tab width
i3list[ATX]=540                # Active Window tab x postion
i3list[AWH]=1700               # Active Window height
i3list[AWI]=4194403            # Active Window id
i3list[AWW]=1080               # Active Window width
i3list[AFO]=AB                 # Active Window relatives
i3list[AWX]=0                  # Active Window x position
i3list[AFC]=B                  # Active Window cousin
i3list[AWY]=220                # Active Window y position
i3list[AFF]=CD                 # Active Window family
i3list[AFS]=D                  # Active Window sibling
i3list[AWB]=20                 # Active Window titlebar height
i3list[AFT]=A                  # Active Window twin
i3list[AWP]=C                  # Active Window parent
i3list[AWC]=94283162546096     # Active Window con_id
i3list[TWB]=20                 # Target Window titlebar height
i3list[TFS]=D                  # Target Window sibling
i3list[TFF]=CD                 # Target Window family
i3list[TWP]=C                  # Target Window Parent container
i3list[TFT]=A                  # Target Window twin
i3list[TWC]=94283162546096     # Target Window con_id
i3list[TWF]=0                  # Target Window Floating
i3list[TTW]=270                # Target Window tab width
i3list[TWH]=1700               # Target Window height
i3list[TTX]=540                # Target Window tab x postion
i3list[TWI]=4194403            # Target Window id
i3list[TWW]=1080               # Target Window width
i3list[TWX]=0                  # Target Window x position
i3list[TFO]=AB                 # Target Window relatives
i3list[TWY]=220                # Target Window y position
i3list[TFC]=B                  # Target Window cousin
i3list[CAF]=94283159300528     # Container A Focused container id
i3list[CBF]=94283160891520     # Container B Focused container id
i3list[CCF]=94283162546096     # Container C Focused container id
i3list[CAW]=1                  # Container A Workspace
i3list[CBW]=1                  # Container B Workspace
i3list[CCW]=1                  # Container C Workspace
i3list[CAL]=tabbed             # Container A Layout
i3list[CBL]=tabbed             # Container B Layout
i3list[CCL]=tabbed             # Container C Layout
i3list[SAB]=730                # Current split: AB
i3list[MCD]=770                # Stored split: CD
i3list[SAC]=220                # Current split: AC
i3list[SBD]=220                # Current split: BD
i3list[SCD]=1080               # Current split: CD
i3list[MAB]=730                # Stored split: AB
i3list[MAC]=220                # Stored split: AC
i3list[LEX]=CBA                # Existing containers (LVI+LHI)
i3list[LHI]=                   # Hidden i3fyra containers
i3list[LVI]=CBA                # Visible i3fyra containers
i3list[FCD]=C                  # Family CD memory
i3list[LAL]=ABCD               # All containers in family order
i3list[WAH]=1920               # Active Workspace height
i3list[WAI]=94283159180304     # Active Workspace con_id
i3list[WAW]=1080               # Active Workspace width
i3list[WSF]=1                  # i3fyra Workspace Number
i3list[WAX]=0                  # Active Workspace x position
i3list[WST]=1                  # Target Workspace Number
i3list[WAY]=0                  # Active Workspace y position
i3list[WFH]=1920               # i3fyra Workspace Height
i3list[WTH]=1920               # Target Workspace Height
i3list[WFI]=94283159180304     # i3fyra Workspace con_id
i3list[WAN]='1'                # Active Workspace name
i3list[WTI]=94283159180304     # Target Workspace con_id
i3list[WFW]=1080               # i3fyra Workspace Width
i3list[WTW]=1080               # Target Workspace Width
i3list[WFX]=0                  # i3fyra Workspace X position
i3list[WTX]=0                  # Target Workspace X poistion
i3list[WFY]=0                  # i3fyra Workspace Y position
i3list[WTY]=0                  # Target Workspace Y position
i3list[WFN]='1'                # i3fyra Workspace name
i3list[WSA]=1                  # Active Workspace number
i3list[WTN]='1'                # Target Workspace name


$ declare -A i3list # declares associative array
$ eval "$(i3list)"
$ echo ${i3list[WAW]}
1080

.fi
.RE

.SH DEPENDENCIES
.PP
\fB\fCbash\fR \fB\fCgawk\fR \fB\fCi3\fR


.SH \fB\fCi3menu\fR - Adds more features to rofi when used in i3wm
.SH SYNOPSIS
.PP
.RS

.nf
i3menu [OPTIONS] <stdin>

.fi
.RE

.SH DESCRIPTION
.PP
\fB\fCi3menu\fR wraps the options i use the most with
\fB\fCrofi\fR  and make it easy to set different color
schemes and positions for the menu.

.PP
Every line in \fB\fCstdin\fR will be displayed as a menu
item.  The order will be the same as entered if
not \fB\fC--top\fR is set.

.PP
The foundation for the appearance of the menus
are the themefiles
\fBi3menu.rasi\fP,\fBthemevars.rasi\fP, found in
I3MENU_DIR (defaults to $XDG_CONFIG_HOME/i3menu),
but depending on the options  passed to \fB\fCi3menu\fR
certain values of the themefiles  will get
overwritten.

.SH OPTIONS
.PP
\fB\fC--theme\fR THEME
.br
If a \fB\&.rasi\fP file with same name as THEME exist
in \fB\fCI3MENU_DIR/themes\fR, it's content will get
appended to theme file before showing the menu.

.PP
\fB\fC$ echo "list" | i3menu --theme red\fR
.br
this will use the the file:
\fB\fCI3MENU_DIR/themes/red.rasi\fR

.PP
If no matching themefile is found,
\fB\fCI3MENU_DIR/themes/default.rasi\fR will be used
(and created if it doesn't exist).

.PP
\fB\fC--layout\fR|\fB\fC-a\fR LAYOUT
.br
This is where \fBi3menu\fP differs the most from
normal \fBrofi\fP behavior and is the only option
that truly depends on \fB\fCi3\fR, \fB\fCi3list\fR (and
\fBi3fyra\fP if the value is A|B|C|D). If this
option is not set, the menu will default to a
single line (\fIdmenu like\fP) menu at the top of the
screen. If however a value to this option is one
of the following:

.TS
allbox;
l l 
l l .
\fB\fCLAYOUT\fR	\fB\fCmenu location and dimensions\fR
mouse	T{
At the mouse position (requires \fB\fCxdotool\fR)
T}
window	The currently active window.
titlebar	T{
The titlebar of the currently active window.
T}
tab	T{
The tab (or titlebar if it isn't tabbed) of the currently active window.
T}
A,B,C or D	The \fBi3fyra\fP container of the same name if it is visible. If target container isn't visible the menu will be displayed at the default location.
.TE

.PP
titlebar and tab LAYOUT will be displayed as a
single line (\fIdmenu like\fP) menu, and the other
LAYOUTS will be of vertical (\fIcombobox\fP) layout
with the prompt and entrybox above the list.

.PP
The position of the menu can be further
manipulated by using
\fB\fC--xpos\fR,\fB\fC--ypos\fR,\fB\fC--width\fR,\fB\fC--height\fR,\fB\fC--orientation\fR,\fB\fC--include\fR\&.

.PP
\fB\fC$ echo "list" | i3menu --prompt "select: "
--layout window --xpos -50 --ypos 30\fR
.br
The command above would create a menu with the
same size and position as the current window, but
place it 50px to the left of the window, and 30px
below the \fIlower\fP of the window.

.PP
\fB\fC--include\fR|\fB\fC-i\fR INCLUDESTRING
.br
INCLUDESTRING can be set to force which elements
of the menu to include. INCLUDESTRING can be one
or more of the following character:

.TS
allbox;
l l 
l l .
\fB\fCchar\fR	\fB\fCelement\fR
\fBp\fP	prompt
\fBe\fP	entrybox
\fBl\fP	list
.TE

.PP
\fB\fCecho "list" | i3menu --include le --prompt
"enter a value: "\fR
.br
The command above will result in a menu without
the \fBprompt\fP element.

.PP
\fB\fCi3menu --include pe --prompt "enter a value: "\fR
.br
The command above will result in a menu without a
\fBlist\fP element. (just an inputbox).

.PP
It's also worth mentioning that \fBi3menu\fP adapts
to the objects it knows before creating the menu.
This means that if no input stream (list) exist,
no list element will be included, the same goes
for the prompt.

.PP
\fB\fC--top\fR|\fB\fC-t\fR TOP
.br
If TOP is set, the input stream (LIST) will get
matched against TOP. Lines in LIST with an exact
MATCH of those in TOP will get moved to the TOP of
LIST before the menu is created.

.PP
\fB\fC$ printf '%s\\n' one two three four | i3menu
--top "$(printf '%s\\n' two four)"\fR

.PP
will result in a list looking like this:
.br
\fB\fCtwo four one three\fR

.PP
\fB\fC--xpos\fR|\fB\fC-x\fR INT
.br
Sets the \fBX\fP position of the menu to INT. If
this option is set, it will override any automatic
position of the \fBX\fP coordinate.

.PP
\fB\fC--xoffset\fR INT
.br
Adds INT to the calculated \fBX\fP position of the
menu before it is displayed. XPOS can be either
positive or negative.

.PP
\fBEXAMPLE\fP
.br
If both \fB\fC--layout\fR is set to \fB\fCwindow\fR and
\fB\fC--xpos\fR is set to \fB\fC-50\fR, the menu will be placed
50 pixels to the left of the active window but
have the same dimensions as the window.

.PP
\fB\fC--ypos\fR|\fB\fC-y\fR INT
.br
Sets the \fBY\fP position of the menu to INT. If
this option is set, it will override any automatic
position of the \fBY\fP coordinate.

.PP
\fB\fC--yoffset\fR INT
.br
Adds INT to the calculated \fBY\fP position of the
menu before it is displayed. INT can be either
positive or negative.

.PP
\fBEXAMPLE\fP
.br
If both \fB\fC--layout\fR is set to \fB\fCtitlebar\fR and
\fB\fC--ypos\fR is set to \fB\fC50\fR, the menu will be placed
50 pixels below the active window.

.PP
\fB\fC--width\fR|\fB\fC-w\fR INT
.br
Changes the width of the menu. If the argument to
\fB\fC--width\fR ends with a \fB\fC%\fR character the width will
be that many percentages of the screenwidth.
Without \fB\fC%\fR absolute width in pixels will be set.

.PP
\fB\fC--options\fR|\fB\fC-o\fR OPTIONS
.br
The argument is a string of aditional options to
pass to \fBrofi\fP\&.

.PP
\fB\fC$ i3menu --prompt "Enter val: " --options
'-matching regex'\fR
.br
will result in a call to rofi looking something
like this:
.br
\fB\fCrofi -p "Enter val: " -matching regex -dmenu\fR

.PP
Note that the \fBrofi\fP options: \fB\fC-p, -filter,
-show, -modi\fR \fIcould be\fP entered to as arguments

.PP
to \fB\fCi3menu --options\fR, but it is recommended to
use: \fB\fC--prompt\fR, \fB\fC--filter\fR, \fB\fC--show\fR and \fB\fC--modi\fR
instead, since this will make i3menu optimize the
layout better.

.PP
\fB\fC--prompt\fR|\fB\fC-p\fR PROMPT
.br
Sets the prompt of the menu to PROMPT.

.PP
\fB\fC--filter\fR|\fB\fC-f\fR FILTER
.br
Sets the inputbox text/filter to FILTER. Defaults
to blank string.

.PP
\fB\fC--show\fR MODE
.br
This is a short hand for the \fBrofi\fP option
\fB\fC-show\fR\&. So instead of doing this:
.br
\fB\fC$ i3menu -o '-show run'\fR , you can do this:
.br
\fB\fC$ i3menu --show run\fR

.PP
\fB\fC--modi\fR MODI
.br
This is a short hand for the \fBrofi\fP option
\fB\fC-modi\fR\&. So instead of doing this:
.br
\fB\fC$ i3menu -o '-modi run,drun -show run'\fR , you
can do this:
.br
\fB\fC$ i3menu --modi run,drun --show run\fR

.PP
\fB\fC--target\fR TARGET
.br
TARGET is a string containing additional options
passed to \fBi3list\fP\&. This can be used to change
the target window when \fB\fC--layout\fR is set to:
\fB\fCwindow\fR,\fB\fCtitlebar\fR or \fB\fCtab\fR\&.

.PP
\fB\fC--orientation\fR ORIENTATION
.br
This forces the layout of the menu to be either
vertical or horizontal. If \fB\fC--layout\fR is set to
\fBwindow\fP, the layout will always be \fB\fCvertical\fR\&.

.PP
\fB\fC--anchor\fR INT
.br
Sets the "\fIanchor\fP" point of the menu. The
default is \fB1\fP\&. \fB1\fP means the top left corner,
\fB9\fP means the bottom right corner. Corner in
this context doesn't refer to the corners of the
screen, but the corners of the menu. If the anchor
is \fItop left\fP (\fB1\fP), the menu will \fIgrow\fP from
that point.

.PP
\fB\fC--height\fR INT
.br
Overrides the calculated height of the menu.

.PP
\fB\fC--fallback\fR FALLBACK
.br
FALLBACK can be a string of optional options the
will be tried if the \fIfirst layout\fP fails. A
layout can fail of three reasons:

.RS
.IP "  1." 5
layout is window or container, but no list is passed. If no fallback is set, \fBtitlebar\fP layout will get tried.
.IP "  2." 5
layout is container but container is not visible. If no fallback is set, \fBdefault\fP layout will get tried.
.IP "  3." 5
layout is window, tab or titlebar but no target window is found. If no fallback is set, \fBdefault\fP layout will get tried.

.RE

.PP
\fBExample\fP

.PP
.RS

.nf
$ echo -e "one\\ntwo\\nthree" | i3menu --layout A --fallback '--layout mouse --width 300'

.fi
.RE

.PP
The example above will display a menu at the
mouse pointer if container A isn't visible.

.PP
Fallbacks can be nested, but make sure to
alternate quotes:

.PP
.RS

.nf
$ echo -e "one\\ntwo\\nthree" | i3menu --layout A --fallback '--layout window --fallback "--layout mouse --width 300"'

.fi
.RE

.PP
The example above would first try to display a
menu with \fB\fC--layout A\fR if that fails, it will try
a menu with \fB\fC--layout window\fR and last if no
target window can be found, the menu will get
displayed at the mouse pointer.

.PP
#options-verbose-description

.PP
Print additional information to STDERR

.PP
#options-dryrun-description

.PP
Do not execute any i3-msg commands

.PP
\fB\fC--no-auto-position\fR

.PP
\fB\fC--help\fR|\fB\fC-h\fR
.br
Show help and exit.

.PP
\fB\fC--version\fR|\fB\fC-v\fR
.br
Show version and exit

.PP
\fB\fC--verbose\fR

.PP
\fB\fC--dryrun\fR

.PP
\fB\fC--list-directory\fR DIRECTORY
.br
This option will list filenames in DIRECORY. The
selected item will be returned with the full path.

.SH ENVIRONMENT
.PP
\fB\fCXDG_CONFIG_HOME\fR

.PP
defaults to: $HOME/.config

.PP
\fB\fCI3MENU_DIR\fR
.br
Path to config directory. defaults to:
$XDG_CONFIG_HOME/i3menu

.SH DEPENDENCIES
.PP
\fB\fCbash\fR \fB\fCgawk\fR \fB\fCrofi\fR \fB\fCi3list\fR \fB\fCxdotool\fR


.SH \fB\fCi3run\fR - Run, Raise or hide windows in i3wm
.SH SYNOPSIS
.PP
.RS

.nf
CRITERIA [OPTIONS] [-- COMMAND]

.fi
.RE

.SH DESCRIPTION
.PP
i3run will try to find a window matching a
criteria. Criteria is specified with one or more
command line options:
.br
\fB\fC--class , --instance , --title , --conid ,
--winid\fR
.br
All criteria specified must match, if multiple
windows match all criteria one will be chosen at
random.

.PP
Depending on the state of target window different
actions will apply:

.TS
allbox;
l l 
l l .
\fB\fC\fBtarget window state\fP\fR	\fB\fC\fBaction\fP\fR
T{
Active and not handled by i3fyra
T}
	send to scratchpad
Active and handled by i3fyra	send container to scratchpad
Handled by i3fyra and hidden	\fBshow\fP container
T{
Not handled by i3fyra and hidden
T}
	\fBshow\fP window
Not on current workspace	T{
goto workspace and focus window
T}
T{
Not active, not hidden, on workspace
T}
	focus window
Not found	execute COMMAND
.TE

.PP
Hidden in this context,  means that window is on
the scratchpad. Show in this context means,  move
window to current workspace.

.PP
With \fB\fC--nohide\fR set windows/containers will not
be sent to the scratchpad by \fBi3run\fP\&.

.PP
With \fB\fC--summon\fR windows not on current workspace
will be sent to current workspace instead of
switching workspace.

.PP
COMMAND is everything after -- , or the argument
to \fB\fC--command\fR\&.

.SH OPTIONS
.PP
\fB\fC--instance\fR|\fB\fC-i\fR INSTANCE
.br
Search for windows with the given INSTANCE

.PP
\fB\fC--summon\fR|\fB\fC-s\fR
.br
Instead of switching workspace, summon window to
current workspace

.PP
\fB\fC--nohide\fR|\fB\fC-g\fR
.br
Don't hide window/container if it's active.

.PP
\fB\fC--class\fR|\fB\fC-c\fR CLASS
.br
Search for windows with the given CLASS

.PP
\fB\fC--rename\fR|\fB\fC-x\fR OLD_NAME
.br
If the search criteria is \fB\fC--instance\fR, the
window with instance: \fIOLDNAME\fP will get a new
instance name matching the criteria when it is
created (\fIneeds \fB\fCxdotool\fR\fP).

.PP
\fBNB\fP
.br
This option will not work reliably when using
multiple search criteria. When you want to do that
instead use:
.br
\fB\fC--rename-instance , --rename-class ,
--rename-title\fR .

.PP
.RS

.nf
i3run --instance budswin --rename sublime_main -- subl

# when the command above is executed:
# a window with the instance name: "budswin" will be searched for.
# if no window is found the command: "subl" will get executed,
# and when a window with the instance name: "sublime_main" is found,
# the instance name of that window will get renamed to: "budswin"

# the example below, will not work properly:  
i3run --title bud --instance budswin --rename sublime_main -- subl

# it will start like the first example, but if it
# doesnt find the custom instance budswin, it will
# try to search for a window with the TITLE sublime_main

# do this instead:  
i3run --title bud --instance budswin --rename-instance sublime_main -- subl

.fi
.RE

.PP
\fB\fC--title\fR|\fB\fC-t\fR TITLE
.br
Search for windows with the given TITLE

.PP
\fB\fC--rename-instance\fR OLD_NAME
.br
explicitly rename the instance.

.PP
\fB\fC--rename-class\fR OLD_NAME
.br
explicitly rename the class.

.PP
\fB\fC--rename-title\fR OLD_NAME
.br
explicitly rename the title.

.PP
\fB\fC--conid\fR|\fB\fC-n\fR CON_ID
.br
Search for windows with the given CON_ID

.PP
\fB\fC--force\fR|\fB\fC-f\fR
.br
Execute COMMAND (\fB\fC--command\fR), even if the window
already exist. But not when hiding a window.

.PP
\fB\fC--FORCE\fR|\fB\fC-F\fR
.br
Execute COMMAND (\fB\fC--command\fR), even if the window
already exist.

.PP
\fB\fC--winid\fR|\fB\fC-d\fR CON_ID

.PP
\fB\fC--command\fR|\fB\fC-e\fR COMMAND
.br
the recommended way of launching commands is to
do: \fB\fCi3run ... -- COMMAND\fR

.SH Example
.PP
.RS

.nf
# with --command:
i3run --instance sublime_text --command 'subl && notify-send "sublime is started"'

# with -- (recomended)
i3run --instance sublime_text -- subl "&&"" notify-send "sublime is started"

.fi
.RE

.PP
Notice that you will need to \fIescape\fP some shell
builtins that effect the commandline (\fB\fC&&\fR, \fB\fC;\fR,
\fB\fC&\fR, \fB\fC|\fR, \fB\fC||\fR ...) in the second example.

.PP
\fB\fC--mouse\fR|\fB\fC-m\fR
.br
The window will be placed on the location of the
mouse cursor when it is created or shown. (\fIneeds
\fB\fCxdotool\fR\fP)

.PP
\fB\fC--help\fR|\fB\fC-h\fR
.br
Show help and exit.

.PP
\fB\fC--version\fR|\fB\fC-v\fR
.br
Show version and exit.

.SH ENVIRONMENT
.PP
\fB\fCI3RUN_BOTTOM_GAP\fR
.br
Distance from the bottom edge of the screen to
show floating windows. This only has effect When
\fB\fC--mouse\fR option is used and the window needs to
be autoadjusted not to be rendered \fIoutisde\fP the
workspace with the mouse cursor on.

.PP
defaults to: 10

.PP
\fB\fCI3RUN_TOP_GAP\fR

.PP
defaults to: 10

.PP
\fB\fCI3RUN_LEFT_GAP\fR

.PP
defaults to: 10

.PP
\fB\fCI3RUN_RIGHT_GAP\fR

.PP
defaults to: 10

.SH DEPENDENCIES
.PP
\fB\fCbash\fR \fB\fCgawk\fR \fB\fCi3list\fR \fB\fCi3get\fR \fB\fCi3var\fR \fB\fCxdotool\fR
\fB\fCi3fyra\fR \fB\fCi3\fR


.SH \fB\fCi3var\fR - Set or get a i3 variable
.SH SYNOPSIS
.PP
.RS

.nf
i3var set VARNAME [VALUE] [--json JSON]
i3var get VARNAME [--json JSON]
i3var --help|-h
i3var --version|-v

.fi
.RE

.SH DESCRIPTION
.PP
\fB\fCi3var\fR is used to get or set a "variable" that
is bound to the current i3wm session.  The
variable is actually the mark on the \fBroot
container\fP\&.

.PP
\fB\fCset\fR  [VALUE]
.br
If \fIVARNAME\fP doesn't exist, a new window and mark
will be created.  If \fIVARNAME\fP exists, it's value
will be replaced with \fIVALUE\fP\&.
.br
If \fIVALUE\fP is not defined,  \fIVARNAME\fP will get
unset (the mark is removed).

.PP
\fB\fCget\fR
.br
if \fIVARNAME\fP exists,  its value will be printed
to \fBSTDOUT\fP\&.

.SH OPTIONS
.PP
\fB\fC--json\fR JSON
.br
Use JSON instead of the output of \fB\fCi3-msg -t
get_tree\fR

.PP
\fB\fC--help\fR|\fB\fC-h\fR
.br
Show help and exit.

.PP
\fB\fC--version\fR|\fB\fC-v\fR
.br
Show version and exit.

.SH DEPENDENCIES
.PP
\fB\fCbash\fR \fB\fCi3\fR


.SH \fB\fCi3viswiz\fR - Professional window focus for i3wm
.SH SYNOPSIS
.PP
.RS

.nf
i3viswiz [--gap|-g GAPSIZE] DIRECTION 
i3viswiz --title|-t       [--gap|-g GAPSIZE] [DIRECTION|TARGET] [--focus|-f] 
i3viswiz --instance|-i    [--gap|-g GAPSIZE] [DIRECTION|TARGET] [--focus|-f]
i3viswiz --class|-c       [--gap|-g GAPSIZE] [DIRECTION|TARGET] [--focus|-f]
i3viswiz --titleformat|-o [--gap|-g GAPSIZE] [DIRECTION|TARGET] [--focus|-f]
i3viswiz --winid|-d       [--gap|-g GAPSIZE] [DIRECTION|TARGET] [--focus|-f]
i3viswiz --parent|-p      [--gap|-g GAPSIZE] [DIRECTION|TARGET] [--focus|-f]
i3viswiz [--json JSON] [--debug VARLIST] [--debug-format FORMAT] [--verbose]
i3viswiz --help|-h
i3viswiz --version|-v

.fi
.RE

.SH DESCRIPTION
.PP
\fB\fCi3viswiz\fR either prints a list of the currently
visible tiled windows to \fB\fCstdout\fR or shifts the
focus depending on the arguments.

.PP
If a \fIDIRECTION\fP (left|right|up|down) is passed,
\fB\fCi3wizvis\fR will shift the focus to the window
closest in the given \fIDIRECTION\fP, or warp focus if
there are no windows in the given direction.

.SH OPTIONS
.PP
\fB\fC--gap\fR|\fB\fC-g\fR TARGET
.br
Set GAPSIZE (defaults to 5). GAPSIZE is the
distance in pixels from the current window where
new focus will be searched.

.PP
\fB\fC--title\fR|\fB\fC-t\fR
.br
If \fBTARGET\fP matches the \fBTITLE\fP of a visible
window, that windows  \fBCON_ID\fP will get printed
to \fB\fCstdout\fR\&. If no \fBTARGET\fP is specified, a list
of all tiled windows will get printed with
\fBTITLE\fP as the last field of each row.

.PP
\fB\fC--focus\fR|\fB\fC-f\fR
.br
When used in conjunction with: \fB\fC--titleformat\fR,
\fB\fC--title\fR, \fB\fC--class\fR, \fB\fC--instance\fR, \fB\fC--winid\fR or
\fB\fC--parent\fR\&. The \fBCON_ID\fP of \fBTARGET\fP window
will get focused if it is visible.

.PP
\fB\fC--instance\fR|\fB\fC-i\fR
.br
If \fBTARGET\fP matches the \fBINSTANCE\fP of a
visible window, that windows  \fBCON_ID\fP will get
printed to \fB\fCstdout\fR\&. If no \fBTARGET\fP is
specified, a list of all tiled windows will get
printed with  \fBINSTANCE\fP as the last field of
each row.

.PP
\fB\fC--class\fR|\fB\fC-c\fR
.br
If \fBTARGET\fP matches the \fBCLASS\fP of a visible
window, that windows  \fBCON_ID\fP will get printed
to \fB\fCstdout\fR\&. If no \fBTARGET\fP is specified, a list
of all tiled windows will get printed with
\fBCLASS\fP as the last field of each row.

.PP
\fB\fC--titleformat\fR|\fB\fC-o\fR
.br
If \fBTARGET\fP matches the \fBTITLE_FORMAT\fP of a
visible window, that windows  \fBCON_ID\fP will get
printed to \fB\fCstdout\fR\&. If no \fBTARGET\fP is
specified, a list of all tiled windows will get
printed with  \fBTITLE_FORMAT\fP as the last field
of each row.

.PP
\fB\fC--winid\fR|\fB\fC-d\fR
.br
If \fBTARGET\fP matches the \fBWIN_ID\fP of a visible
window, that windows  \fBCON_ID\fP will get printed
to \fB\fCstdout\fR\&. If no \fBTARGET\fP is specified, a list
of all tiled windows will get printed with
\fBWIN_ID\fP as the last field of each row.

.PP
\fB\fC--parent\fR|\fB\fC-p\fR
.br
If \fBTARGET\fP matches the \fBPARENT\fP of a visible
window, that windows  \fBCON_ID\fP will get printed
to \fB\fCstdout\fR\&. If no \fBTARGET\fP is specified, a list
of all tiled windows will get printed with
\fBPARENT\fP as the last field of each row.

.PP
\fB\fC--json\fR JSON
.br
use JSON instead of output from  \fB\fCi3-msg -t
get_tree\fR

.PP
\fB\fC--debug\fR VARLIST
.br
VARLIST is used to determine what to output. By
default the value of VARLIST is: \fB\fCLIST\fR .
Available units are:

.PP
.RS

.nf
wall         | none|(up|left|down|right-)(workspace|area)
trgcon       | container id of the window to be focused
trgpar       | name of i3fyra container target container is located in
gap          | internal gap value used
sw           | active workspace width
sh           | active workspace height
sx           | active workspace x position
sy           | active workspace y position
aw           | active window width
ah           | active window height
ax           | active window x position
ay           | active window y position
trgx         | target windows x position
trgy         | target windows y position
grouplayout  | active windows parent container layout (tabbed|splitv|splith|stacked)
groupid      | active windows parent container ID
grouppos     | active windows position relative to its sibling containers
groupsize    | number of child containers in active windows parent container
firstingroup | container ID of the first child in active windows parent container
lastingroup  | container ID of the last child in active windows parent container
LIST         | prints a table with all visible windows
ALL          | all the above combined

.fi
.RE

.PP
Multiple units can be used if comma separated.

.PP
Example:

.PP
.RS

.nf
$ i3viswiz --instance u --debug gap,wall,grouppos
gap=5 wall=up-area grouppos=1 

.fi
.RE

.PP
\fB\fC--debug-format\fR FORMAT
.br
The default value of FORMAT is "%k=%v ".  \fB\fC%k\fR is
translated to the key/unit name, and \fB\fC%v\fR to the
value.

.PP
Example:

.PP
.RS

.nf
$ i3viswiz --instance u --debug gap,wall,grouppos --debug-format "%v\\n"
5
up-area
1 

.fi
.RE

.PP
\fB\fC--verbose\fR
.br
If set, more stuff gets printed to \fBSTDERR\fP
during the execution of the script.

.PP
Example:

.PP
.RS

.nf
$ i3viswiz --instance u --debug gap --verbose 

---i3viswiz start---
gap=5 
f cleanup()
---i3viswiz done: 14ms---

.fi
.RE

.PP
\fB\fC--help\fR|\fB\fC-h\fR
.br
Show help and exit.

.PP
\fB\fC--version\fR|\fB\fC-v\fR
.br
Show version and exit.

.SH EXAMPLES
.PP
replace the normal i3 focus keybindings with
viswiz like this:

.PP
.RS

.nf
Normal binding:
bindsym Mod4+Shift+Left   focus left

Wizzy binding:
bindsym Mod4+Left   exec --no-startup-id i3viswiz left

.fi
.RE

.PP
example output:

.PP
.RS

.nf
$ i3viswiz --instance

* 94475856575600 ws: 1 x: 0     y: 0     w: 1558  h: 410   | termsmall
- 94475856763248 ws: 1 x: 1558  y: 0     w: 362   h: 272   | gl
- 94475856286352 ws: 1 x: 0     y: 410   w: 1558  h: 643   | sublime_main
- 94475856449344 ws: 1 x: 1558  y: 272   w: 362   h: 781   | thunar-lna

.fi
.RE

.PP
If \fB\fC--class\fR , \fB\fC--instance\fR, \fB\fC--title\fR,
\fB\fC--titleformat\fR, \fB\fC--winid\fR or \fB\fC--parent\fR is used
together with a DIRECTION or no argument. i3viswiz
will print this output, with the type in the last
column of the table (class in the example above).

.PP
If argument is present and not a DIRECTION option
will be a criteria and the argument the search
string.

.PP
Assuming the same scenario as the example above,
the following command:
.br
\fB\fC$ i3viswiz --instance termsmall\fR
.br
will output the container_id (\fB\fC94475856575600\fR).
.br
If now window is matching output will be blank.

.PP
\fBfocus wrapping\fP

.PP
if the setting "focus_wrapping" is set to
"workspace" in the i3config. i3viswiz will wrap
the focus only inside the currenttly focused
workspace instead of the whole work area (other
monitors).

.PP
The setting has to be present in the active
config before the first i3viswiz invokation.

.PP
To force this behavior otherwise, issue the
following command:
.br
\fB\fCi3var set focus_wrap workspace\fR

.PP
Or to disable it:
.br
\fB\fCi3var set focus_wrap normal\fR

.SH DEPENDENCIES
.PP
\fB\fCbash\fR \fB\fCgawk\fR \fB\fCi3\fR

.SH EXAMPLES
.PP
Execute a script with the \fB\fC--help\fR flag to
display help about the command.

.PP
\fB\fCi3get --help\fR display [i3get] help
.br
\fB\fCi3get --version\fR display [i3get] version
.br
\fB\fCman i3get\fR show [i3get] man page
.br
\fB\fCi3ass\fR show version info for all scripts and
dependencies.

.SH DEPENDENCIES
.PP
\fB\fCbash\fR \fB\fCgawk\fR \fB\fCi3\fR \fB\fCgit\fR

.PP
budRich https://github.com/budlabs/i3ass
\[la]https://github.com/budlabs/i3ass\[ra]

.SH SEE ALSO
.PP
bash(1), awk(1), i3(1), git(1),
