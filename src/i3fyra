#!/usr/bin/env bash

___printversion(){
  
cat << 'EOB' >&2
i3fyra - version: 1.22
updated: 2021-09-13 by budRich
EOB
}


# environment variables
: "${I3FYRA_MAIN_CONTAINER:=A}"
: "${I3FYRA_WS:=}"
: "${I3FYRA_ORIENTATION:=horizontal}"
: "${XDG_RUNTIME_DIR:=/tmp}"
: "${I3_KING_PID_FILE:=$XDG_RUNTIME_DIR/i3ass/i3king.pid}"


main(){

  local arg

  for _action in assign-to move show hide layout float; do
    [[ ${arg:=${__o[$_action]}} ]] && break
  done

  [[ $arg ]] || ERX "not a valid operation: $0 $*"

  initialize_globals

  [[ ${__o[layout]} ]] && arg=${arg/${ori[main]}/main}
  ((__o[force]))       || arg=$(virtual_position "$arg")

  case "$_action" in

    move )
      if [[ $arg =~ ^[ABCD]$ ]]; then
        active_move_to_container "$arg"
      elif [[ ${arg:0:1} =~ [urld] ]]; then
        active_move_in_direction "${arg:0:1}"
      else
        ERX "'$arg' is not a valid argument for --move"
      fi
    ;;

    show   ) container_show "$arg" ;;
    hide   ) container_hide "$arg" ;;
    layout ) apply_splits "$arg"   ;;
    float  ) float_toggle          ;;

  esac

  [[ $_action =~ layout|hide ]] \
    || messy "[con_id=${i3list[TWC]}]" focus
}

___printhelp(){
  
cat << 'EOB' >&2
i3fyra - An advanced, simple grid-based tiling layout


SYNOPSIS
--------
i3fyra --show|-s CONTAINER [--force|-f]
i3fyra --float|-a
i3fyra --hide|-z CONTAINER [--force|-f]
i3fyra --layout|-l LAYOUT [--force|-f] [--array ARRAY] [--verbose] [--dryrun]
i3fyra --move|-m DIRECTION|CONTAINER [--conid|-n ID] [--force|-f] [--speed|-p INT]
i3fyra --help|-h
i3fyra --version|-v

OPTIONS
-------

--show|-s CONTAINER  
Show target container. If it doesn't exist, it
will be created and current window will be put in
it. If it is visible, nothing happens.


--force|-f  
If set virtual positions will be ignored.


--float|-a  
Autolayout. If current window is tiled: floating
enabled If window is floating, it will be put in a
visible container. If there is no visible
containers. The window will be placed in a hidden
container. If no containers exist, container
'A'will be created and the window will be put
there.


--hide|-z CONTAINER  
Hide target containers if visible.  


--layout|-l LAYOUT  
alter splits Changes the given splits. INT is a
distance in pixels. AB is on X axis from the left
side if INT is positive, from the right side if it
is negative. AC and BD is on Y axis from the top
if INT is positive, from the bottom if it is
negative. The whole argument needs to be quoted.
Example:  
$ i3fyra --layout 'AB=-300 BD=420'  



--array ARRAY  
ARRAY should be the output of i3list. It is used
to improve speed when i3fyra is executed from a
script that already have the array, f.i. i3run and
i3Kornhe.  


--verbose  
If set information about execution will be
printed to stderr.


--dryrun  
If set no window manipulation will be done during
execution.


--move|-m CONTAINER  
Moves current window to target container, either
defined by it's name or it's position relative to
the current container with a direction:
[l|left][r|right][u|up][d|down] If the container
doesnt exist it is created. If argument is a
direction and there is no container in that
direction, Connected container(s) visibility is
toggled. If current window is floating or not
inside ABCD, normal movement is performed.
Distance for moving floating windows with this
action can be defined with the --speed option.
Example: $ i3fyra --speed 30 -m r Will move
current window 30 pixels to the right, if it is
floating.


--conid|-n ID  
To set the target window for operations. If not
set the active window will be used.

--speed|-p INT  
Distance in pixels to move a floating window.
Defaults to 30.


--help|-h  
Show help and exit.


--version|-v  
Show version and exit

EOB
}


move_normal() {
  local ldir

  case "${1:0:1}" in
    l ) ldir=left  ;;
    d ) ldir=down  ;;
    u ) ldir=up    ;;
    r ) ldir=right ;;
  esac

  messy "[con_id=${i3list[TWC]}]" move "$ldir"
}

active_move_in_direction() {
  local direction=$1

  ((i3list[TWF] || i3list[WST] != i3list[WSF])) \
    && exec i3Kornhe --array "$_array" m "$direction"

  # get visible info from i3viswiz
  # vw_target is the container currently at target pos
  # vw_parent is the parent of vw_target (A|B|C|D)
  # vw_groupsize is the number of siblings to the
  #   currently focused container
  # vw_wall is not none if target focus lands outside
  #   the current workspace
  local vw_wall vw_parent wizoutput
  declare -i vw_groupsize vw_target

  if [[ ${__o[dryrun]} && -z ${wizoutput:=${i3list[VISWIZ]}} ]]; then
    wizoutput='vw_target=3333 vw_wall=up vw_parent=C vw_groupsize=1' 
  else
    read -r vw_wall vw_groupsize vw_target vw_parent < <(
      i3viswiz --parent "$direction" \
               --debug "wall,groupsize,trgcon,trgpar" \
               --debug-format "%v "
    )

    wizoutput+="vw_target=$vw_target "
    wizoutput+="vw_wall=$vw_wall "
    wizoutput+="vw_parent=$vw_parent "
    wizoutput+="vw_groupsize=$vw_groupsize"
  fi

  ((__o[verbose])) && ERM "w $wizoutput"

  declare -A swapon

  swapon=([u]=AB [d]=CD [l]=AC [r]=BD)

  local sibdir target family sibling relatives

  ((_isvertical)) && sibdir=lr || sibdir=ud
    
  target=${i3list[TWP]}
  family=${i3list[TFF]}
  sibling=${i3list[TFS]}
  relatives=${i3list[TFO]}

  if   [[ ! $vw_parent ]]; then
    # when triggered on a tiled window on the i3fyra ws
    # that for some reason isn't part of the layout
    move_normal "$direction"
  elif [[ $vw_wall != none ]]; then # hit wall, toggle something

    if [[ $sibdir =~ $direction ]]; then # sibling toggling
      
      if [[ ${i3list[LVI]} =~ $sibling ]]; then
        container_hide "$sibling"
      elif [[ ${i3list[LHI]} =~ $sibling ]]; then
        container_show "$sibling"
        [[ ${swapon[$direction]} =~ $sibling ]] \
          && swap_move "i34$sibling" "i34$target"
      elif ((vw_groupsize > 1)); then # sibling doesn't exist
        active_move_to_container "$sibling"
        [[ ${swapon[$direction]} =~ $sibling ]] \
          || swap_move "i34$sibling" "i34$target"
        messy "[con_id=${i3list[TWC]}]" focus
      fi
    
    else # family toggling

      if [[ ${i3list[LVI]} =~ [${relatives}] ]]; then
        family_hide "$relatives"
      elif [[ ${i3list[LHI]} =~ [${relatives}] ]]; then
        family_show "$relatives"
        [[ ${swapon[$direction]} =~ [${relatives}] ]] \
          && swap_move "i34X$relatives" "i34X$family"
      elif ((vw_groupsize > 1)); then # no other family exist
        active_move_to_container "${relatives:0:1}"

        # hor: AC    vert: AB
        [[ $direction =~ u|l && $relatives = ${ori[fam1]} ]] \
          || swap_move "i34X$relatives" "i34X$family"
        # moving left|up && $relatives = fam1 ||
        # ori=([main]=AB [fam1]=AC [fam2]=BD)
        # [[ ${swapon[$direction]} =~ [${relatives}] ]] \
        #   && swap_move "i34X$relatives" "i34X$family"
        messy "[con_id=${i3list[TWC]}]" focus
      fi
    fi

  elif [[ $vw_parent = "$target" ]]; then
    # target and current container is the same
    # which indicates it is also not in a tabbed|stacked
    # container -> move normally
    move_normal "$direction"
  else

    if [[ ${i3list[C${vw_parent}L]} =~ splitv|splith && $direction =~ r|d ]]; then
      
      # move above/to the left of target container
      messy "[con_id=${vw_target}]" \
        mark --add i34tmp
      messy "[con_id=${i3list[TWC]}]" \
        move to mark i34tmp, swap mark i34tmp
      messy "[con_id=${vw_target}]" \
        mark --add --toggle i34tmp

    else 
      messy "[con_id=${i3list[TWC]}]" \
        move to mark "i34${vw_parent}", focus
    fi
  fi
  
}

active_move_to_container() {

  ((__o[verbose])) && ERM "f ${FUNCNAME[0]}($*)"
  
  local target=$1 newcont

  [[ ${i3list[LEX]} =~ $target ]] || newcont=1

  container_show "$target"

  ((newcont)) || messy "[con_id=${i3list[TWC]}]"      \
                        focus, floating disable,      \
                        move to mark "i34$target", focus
}

apply_splits(){

  ((__o[verbose])) && ERM "f ${FUNCNAME[0]}($*)"
  
  local i tsn dir target sibling
  declare -i tsv splitexist size 

  for i in ${1}; do
    tsn=${i%=*} # target split name
    tsv=${i#*=} # target split value

    if [[ $tsn = "${ori[main]}" || $tsn = main ]]; then
      tsn=${ori[main]}
      target="X${ori[fam1]}" # name of split to resize
      dir=${ori[resizemain]} size=${ori[sizemain]}

      # when --layout option is used, invert split
      # if families are inverted
      # container A virtual position (VPA)
      # inverse mainsplit (2|3 || 1|3)
      [[ -n ${__o[layout]} ]] \
        && (( (_isvertical  && i3list[VPA] > 1)    \
           || (!_isvertical && i3list[VPA] % 2) )) \
        && ((tsv *= -1))

      [[ ${i3list[X${tsn}]} ]] && splitexist=1
    else
      target=${tsn:0:1} sibling=${tsn:1:1}
      dir=${ori[resizefam]} size=${ori[sizefam]}

      [[ ${i3list[LVI]} =~ $target && ${i3list[LVI]} =~ $sibling ]] \
        && splitexist=1
    fi

    ((tsv<0)) && tsv=$((size-(tsv*-1)))

    ((splitexist)) && {
      # i3list[Sxx] = current/actual split xx
      i3list[S${tsn}]=${tsv}
      sezzy "con_mark=i34${target}" resize set "$dir" "$tsv" px
    }

    # i3list[Mxx] = last/stored    split xx
    # store split even if its not visible
    mark_vars["i34M${tsn}"]=$tsv

  done
}

cleanup() {

  ((__o[verbose])) && ERM "f ${FUNCNAME[0]}()"

  ((${#mark_vars[@]})) && varset

  [[ -n $_msgstring ]] \
    && i3-msg "$_qflag" "${_msgstring%;}"

  ((${#new_size[@]})) && {
    for k in "${!new_size[@]}"; do 
      _sizestring+="[$k] ${new_size[$k]};"
    done
    i3-msg "${qflag:-}" "${_sizestring%;}"
  }

  ((__o[verbose])) && {
    local delta=$(( ($(date +%s%N)-_stamp) /1000 ))
    local time=$(((delta / 1000) % 1000))
    ERM  "---i3fyra done: ${time}ms---"
  }
}

container_create() {

  ((__o[verbose])) && ERM "f ${FUNCNAME[0]}($*)"
  
  local target=$1

  messy "[con_id=${i3list[TWC]}]"       \
    floating disable,                   \
    move to workspace "${i3list[WSF]}"

  [[ ${i3list["X${ori[main]}"]} ]] && {
    messy "[con_mark=i34X${ori[main]}]" \
      split h
    messy "[con_id=${i3list[TWC]}]" \
      move to mark "i34X${ori[main]}"
  }

  messy "[con_id=${i3list[TWC]}]" \
    split h,                      \
    layout tabbed,                \
    focus, focus parent

  messy mark "i34$target"
}

container_hide(){

  ((__o[verbose])) && ERM "f ${FUNCNAME[0]}($*)"
  
  local target=$1
  local target_family sibling
  declare -i split_main split_family

  [[ ${#target} -gt 1 ]] && {
    multi_hide "$target"
    return
  }

  [[ ${ori[fam1]} =~ $target ]] \
    && target_family=${ori[fam1]} \
    || target_family=${ori[fam2]}


  split_main=${i3list[S${ori[main]}]:=0}
  split_family=${i3list[S$target_family]:=0}

  sibling=${target_family/$target/}

  messy "[con_mark=i34${target}]" move scratchpad
  i3list[LVI]=${i3list[LVI]/$target/}
  i3list[LHI]+="$target"

  # if target is last of it's fam, note it.
  # else focus sibling as the last operation (main())
  [[ ${i3list[LVI]} =~ $sibling ]]         \
    && i3list[SIBFOC]=$sibling             \
    || mark_vars["i34F${target_family}"]=$target

  # note splits
  ((split_main && split_main != ori[sizemain])) && {
    mark_vars["i34M${ori[main]}"]=$split_main
    i3list[M${main}]=$split_main
    mark_vars["i34M${target_family}"]=$split_family
    i3list[M${target_family}]=$split_family
  }

}

container_show() {

  ((__o[verbose])) && ERM "f ${FUNCNAME[0]}($*)"
  
  local target=$1 target_family new_family

  [[ ${#target} -gt 1 ]] && {
    multi_show "$target"
    return
  }

  [[ ${ori[fam1]} =~ $target ]] \
    && target_family=${ori[fam1]} \
    || target_family=${ori[fam2]}

  if [[ ${i3list[LVI]} =~ $target ]]; then
    return
  elif [[ ! ${i3list[LHI]} =~ $target ]]; then
    container_create "$target"
  elif ((i3list[X$target_family] == i3list[WSF])); then
    messy "[con_mark=i34${target}]"       \
      move to workspace "${i3list[WSF]}", \
      floating disable
  fi

  [[ ${i3list[X$target_family]} ]] || new_family=1
  family_show "$target_family" "$target"

  i3list[LHI]=${i3list[LHI]/$target/}
  i3list[LVI]+=$target
  i3list[LEX]="${i3list[LHI]}${i3list[LVI]}"

  ((new_family)) || {
    messy "[con_mark=i34$target]" \
      move to mark "i34X$target_family"

    [[ $target = "${target_family:0:1}" ]] && {
      messy "[con_mark=i34$target]" \
        swap mark "i34${target_family:1:1}"
    }

    tspl=${i3list[M${target_family}]}
    tdim=${ori[sizefam]}

    ((tspl  )) && {
      i3list[S${target_family}]=$((tdim/2))
      apply_splits "${target_family}=$tspl"
    }
  }
}

set -E
trap '[ "$?" -ne 98 ] || exit 98' ERR

ERX() { >&2 echo  "[ERROR] $*" ; exit 98 ;}
ERR() { >&2 echo  "[WARNING] $*"  ;}
ERM() { >&2 echo  "$*"  ;}
ERH(){
  ___printhelp >&2
  [[ -n "$*" ]] && printf '\n%s\n' "$*" >&2
  exit 98
}


family_create() {

  ((__o[verbose])) && ERM "f ${FUNCNAME[0]}($*)"

  local target_family=$1 target_container=$2

  if [[ ${i3list["X${ori[main]}"]} ]]; then
    messy "[con_mark=i34X${ori[main]}]" \
      split h
    messy "[con_mark=i34$target_container]" \
      move to workspace "${i3list[WSF]}", \
      floating disable, \
      move to mark "i34X${ori[main]}", split h, \
      layout splitv, \
      focus, focus parent
    messy mark "i34X$target_family"
  else
    messy "[con_mark=i34$target_container]" \
      move to workspace "${i3list[WSF]}", \
      floating disable, \
      layout splitv, \
      focus, focus parent
    messy mark "i34X$target_family"
    messy "[con_mark=i34X$target_family]" \
      layout splith, \
      focus, focus parent
    messy mark "i34X${ori[main]}"
  fi
}

family_hide(){

  ((__o[verbose])) && ERM "f ${FUNCNAME[0]}($*)"
  
  local family=$1
  local child childs

  declare -i famw famh famx famy split_size
  declare -a visible_children

  split_size=$(( ( _isvertical ? i3list[WFH] : i3list[WFW] ) - i3list["S${ori[main]}"] ))
  ((split_size < 0)) && ((split_size *= -1))

  famw=$((_isvertical ? i3list[WFW] : split_size ))
  famh=$((_isvertical ? split_size : i3list[WFH]))
  famx=$((_isvertical ? 0 : i3list["S${ori[main]}"]))
  famy=$((_isvertical ? i3list["S${ori[main]}"] : 0))

  for child in "${family:0:1}" "${family:1:1}"; do
    [[ ${i3list[LVI]} =~ $child ]] \
      && visible_children+=("$child")
  done

  if ((${#visible_children[@]} == 1)); then
    child=${visible_children[0]}
    messy "[con_mark=i34$child]" \
      move scratchpad

    i3list[LVI]=${i3list[LVI]/$child/}
    i3list[LHI]+=$child

    unset 'i3list[X$family]'
    i3list[F$family]=$child
    mark_vars["i34F${family}"]=$child
  else
    messy "[con_mark=i34X${family}]"                \
      floating enable,                              \
      resize set "$famw" "$famh",                   \
      move absolute position "$famx" px "$famy" px, \
      move scratchpad

    for child in "${visible_children[@]}"; do
      i3list[LVI]=${i3list[LVI]/$child/}
      i3list[LHI]+=$child
      childs+=$child
    done

    mark_vars["i34F${family}"]=$childs
    mark_vars["i34M${family}"]=${i3list[S${family}]:=0}
  fi

  mark_vars["i34M${ori[main]}"]=${i3list[S${ori[main]}]:=0}

}

family_show() {

  ((__o[verbose])) && ERM "f ${FUNCNAME[0]}($*)"

  local target_family=$1 target_container=${2:-}
  local other_family

  ((i3list["X${target_family}"] == i3list[WSF])) \
    && return

  
  if [[ -z ${i3list[X${target_family}]} ]]; then
    # when family_hide and family contains only
    # one container. The family is destroyed and
    # the container is moved to the scratchpad
    # but noted in [F$family]
    last_in_fam=${i3list[F$target_family]:0:1}

    if [[ ! $target_container ]]; then
     [[ ${i3list[LEX]} =~ $last_in_fam ]] && {
       family_create "$target_family" "$last_in_fam"
     }
    else
      family_create "$target_family" "$target_container"
    fi

  elif ((i3list["X${target_family}"] != i3list[WSF])); then

    messy "[con_mark=i34X${target_family}]" \
      move to workspace "${i3list[WSF]}", \
      floating disable

    if [[ ${i3list["X${ori[main]}"]} ]]; then

      messy "[con_mark=i34X${ori[main]}]"     \
        split h
      messy "[con_mark=i34X${target_family}]" \
        move to mark "i34X${ori[main]}"

    else
      messy "[con_mark=i34X${target_family}]" \
        layout splith, \
        focus, focus parent
      messy mark "i34X${ori[main]}"
    fi
  fi

  # when target family is AC or AB, it is 
  # the "first" family in the main container
  # if the other family is visible, 
  # we need to swap them
  [[ $target_family =~ A ]] && {

    [[ ${ori[fam1]} =~ A ]] \
      && other_family=${ori[fam2]} \
      || other_family=${ori[fam1]}

    ((i3list["X${other_family}"] == i3list[WSF])) \
      && messy "[con_mark=i34X${target_family}]"  \
           swap mark "i34X${other_family}"
  }

  apply_splits "${ori[main]}=${i3list[M${ori[main]}]}"
}

float_toggle(){

  ((__o[verbose])) && ERM "f ${FUNCNAME[0]}()"

  local target

  # AWF - 1 = floating; 0 = tiled
  if ((i3list[AWF]==1)); then

    [[ -f $I3_KING_PID_FILE ]] && {

      mapfile -t king_commands <<< "$(i3king --conid "${i3list[TWC]}" --print-commands)"

      for command in "${!king_commands[@]}"; do
        if [[ ${king_commands[command]} =~ floating\ enable ]]
          then unset 'king_commands[command]'
          else messy "${king_commands[command]}"
        fi
      done

      [[ ${king_commands[*]} ]] && return
    }

    # WSA != i3fyra && normal tiling
    if ((i3list[WSA]!=i3list[WSF])); then
      messy "[con_id=${i3list[AWC]}]" floating disable
      return
    fi
    

    if [[ ${i3list[LVI]} =~ I3FYRA_MAIN_CONTAINER ]]; then
      target=$I3FYRA_MAIN_CONTAINER
    elif [[ ${i3list[LVI]} ]]; then
      target=${i3list[LVI]:0:1}
    elif [[ ${i3list[LHI]} ]]; then
      target=${i3list[LHI]:0:1}
    else
      target=$I3FYRA_MAIN_CONTAINER
    fi

     if [[ ${i3list[LEX]} =~ $target ]]; then
      container_show "$target"
      messy "[con_id=${i3list[AWC]}]" floating disable, \
        move to mark "i34${target}"
    else
      # if $target container doesn't exist, create it
      container_show "$target"
    fi
  else
    # AWF == 0 && make AWC floating
    messy "[con_id=${i3list[AWC]}]" floating enable
  fi
}

initialize_globals() {

  # __o[verbose]=1
  # __o[dryrun]=1

  ((__o[verbose])) && {
    declare -gi _stamp
    _stamp=$(date +%s%N)
    ERM $'\n'"---i3fyra start---"
  }

  trap 'cleanup' EXIT

  declare -Ag i3list
  declare -Ag mark_vars
  declare -Ag new_size
  declare -Ag ori

  _marks_json=$(i3-msg -t get_marks)

  [[ $_action != layout && ! $_marks_json =~ i3fyra_ws ]] && {
    # the i3fyra_ws mark/var is read by i3list
    # if it isn't present no info regarding i3fyra
    # will be in the output of i3list
    # we set the mark/var here

    ((__o[verbose])) && ERM INIT FYRA_WS

    [[ $I3FYRA_WS ]] || {
      eval "$(i3list)"
      I3FYRA_WS=\"${i3list[WAN]}\"
    }

    (( __o[float] && i3list[AWF]==0 )) || {
      i3var set i3fyra_ws "$I3FYRA_WS"
      i3var set i34ORI "$I3FYRA_ORIENTATION"
    }

  }

  # _qflag is option added to i3-msg (cleanup())
  ((__o[verbose])) || _qflag='-q'

  : "${__o[array]:=$(i3list ${__o[conid]:+-n ${__o[conid]}})}"
  eval "${_array:=${__o[array]}}"

  declare -gi _isvertical

  declare -i sw=${i3list[WFW]:-${i3list[WAW]}}
  declare -i sh=${i3list[WFH]:-${i3list[WAH]}}
  declare -i swh=$((sw/2))
  declare -i shh=$((sh/2))

  if [[ ${i3list[ori]} = vertical ]]; then
    _isvertical=1
    ori=(

      [main]=AC [fam1]=AB [fam2]=CD

      [charmain]=v        [charfam]=h
      [movemain]=down     [movefam]=right
      [resizemain]=height [resizefam]=width
      [sizemain]=$sh      [sizefam]=$sw 
      [sizemainhalf]=$shh [sizefamhalf]=$swh

    )
  else
    _isvertical=0
    ori=(

      [main]=AB [fam1]=AC [fam2]=BD

      [charmain]=h        [charfam]=v
      [movemain]=right    [movefam]=down
      [resizemain]=width  [resizefam]=height
      [sizemain]=$sw      [sizefam]=$sh
      [sizemainhalf]=$swh [sizefamhalf]=$shh

    )
  fi
}

messy() {
  # arguments are valid i3-msg arguments
  # separate resize commands and execute
  # all commands at once in cleanup()
  (( __o[verbose] )) && ERM "m $*"
  (( __o[dryrun]  )) || _msgstring+="$*;"
}

sezzy() {
  local criterion=$1 args
  shift
  args=$*
  (( __o[verbose] )) && ERM "r [$criterion] $args"
  (( __o[dryrun]  )) || new_size["$criterion"]=$args
}

multi_hide(){

  ((__o[verbose])) && ERM "f ${FUNCNAME[0]}($*)"
  
  local arg=$1 trg trgs i f1=${ori[fam1]} f2=${ori[fam2]}

  # only hide visible containers in arg
  for (( i = 0; i < ${#arg}; i++ )); do
    trg=${arg:$i:1}
    [[ ${i3list[LVI]} =~ $trg ]] && trgs+=$trg
  done

  ((${#trgs})) || return
  
  # hide whole families if present in arg and visible
  [[ $trgs =~ ${f1:0:1} && $trgs =~ ${f1:1:1} ]] \
    && trgs=${trgs//[$f1]/} && family_hide "$f1"
  
  [[ $trgs =~ ${f2:0:1} && $trgs =~ ${f2:1:1} ]] \
    && trgs=${trgs//[$f2]/} && family_hide "$f2"

  # hide rest if any
  ((${#trgs})) && for ((i=0;i<${#trgs};i++)); do
    container_hide "${trgs:$i:1}"
  done
}

multi_show(){

  ((__o[verbose])) && ERM "f ${FUNCNAME[0]}($*)"
  
  local arg=$1 trg trgs i f1=${ori[fam1]} f2=${ori[fam2]}

  # only show hidden containers in arg
  for (( i = 0; i < ${#arg}; i++ )); do
    trg=${arg:$i:1}
    [[ ${i3list[LHI]} =~ $trg ]] \
      && container_show "$trg"
  done
}

swap_move(){

  ((__o[verbose])) && ERM "f ${FUNCNAME[0]}($*)"

  local m1=$1 m2=$2
  local c1 c2 i1 i2 v1 v2 tmrk k 
  declare -i tspl tdim

  messy "[con_mark=${m1}]"  swap mark "${m2}", mark i34tmp
  messy "[con_mark=${m2}]"  mark "${m1}"
  messy "[con_mark=i34tmp]" mark "${m2}"

  declare -A acn
  declare -a ivp
  declare -A iip

  iip=([A]=0 [B]=1 [C]=2 [D]=3)

  # if: i3list[VPA]=2 ; i3list[VPC]=0 \
  #       -> ivp=([0]=C [1]=B [2]=A [3]=D)
  for k in "${!iip[@]}"; do
    ivp[${i3list[VP${k}]:=${iip[$k]}}]=$k
  done

  # family marks always contain 'X'
  # when we swap families all virtual positions
  # are swapped
  if [[ $m1 =~ X ]]; then

    ((_isvertical)) \
      && acn=([A]=C [B]=D [C]=A [D]=B) \
      || acn=([A]=B [B]=A [C]=D [D]=C)

    tdim=${ori[sizemain]}
    tmrk=${ori[main]}
    tspl=${i3list[S$tmrk]}

    mark_vars[i34M${ori[fam1]}]=${i3list[M${ori[fam2]}]}
    mark_vars[i34M${ori[fam2]}]=${i3list[M${ori[fam1]}]}

    for k in A B C D; do

      c1=${k}             c2=${acn[$k]}
      i1=${iip[$c1]}      i2=${iip[$c2]}
      v1=${ivp[$i1]:=$i1} v2=${ivp[$i2]:=$i2}

      mark_vars[i34VP$v1]=$i2
      mark_vars[i34VP$v2]=$i1

      [[ ${i3list[LEX]} =~ $k ]] || continue
      messy "[con_mark=i34$k]" mark "i34tmp$k"
    done

    for k in A B C D; do
      [[ ${i3list[LEX]} =~ $k ]] || continue
      messy "[con_mark=i34tmp$k]" mark "i34${acn[$k]}"
    done

    
  else # swap within family

    c1=${m1#i34}        c2=${m2#i34}
    i1=${iip[$c1]}      i2=${iip[$c2]}
    v1=${ivp[$i1]:-$i1} v2=${ivp[$i2]:-$i2}

    mark_vars[i34VP$v1]=$i2
    mark_vars[i34VP$v2]=$i1

    [[ ${ori[fam1]} =~ $c1 ]] \
      && tmrk=${ori[fam1]} \
      || tmrk=${ori[fam2]}

    tspl="${i3list[S${tmrk}]}"
    tdim=${ori[sizefam]}

  fi

  # invert split
  ((tspl+tdim)) && apply_splits "$tmrk=$((tdim-tspl))"

  messy "[con_id=${i3list[TWC]}]" focus
}

varset() {

  ((__o[verbose])) && ERM "f ${FUNCNAME[0]}(${mark_vars[*]})"

  local key val re  current_value

  for key in "${!mark_vars[@]}"; do
    val=${mark_vars[$key]}

    re="\"${key}=([^\"]*)\""

    [[ $_marks_json =~ $re ]] && current_value=${BASH_REMATCH[1]}

    new_mark="${key}=$val"
    old_mark="${key}=$current_value"

    # this will remove the old mark
    [[ $current_value ]] \
      && messy "[con_id=${i3list[RID]}] mark --toggle --add $old_mark"

    messy "[con_id=${i3list[RID]}] mark --add $new_mark"

  done
}

# takes a string with one or more container names (ABCD)
# returns virtual positions for the containers
virtual_position() {

  ((__o[verbose])) && ERM "f ${FUNCNAME[0]}($*)"

  local target=$1
  declare -i vpos k
  declare -a q

  # if target is A && i3list[VPA] == 2
  # then target=@@2 -> target=C

  [[ $target =~ [ABCD] ]] && {
    
    q=([0]=A [1]=B [2]=C [3]=D)

    for k in 0 1 2 3; do
      vpos=${i3list[VP${q[$k]}]:=$k}
      (( k != vpos )) && [[ $target =~ ${q[k]} ]] \
        && target=${target//${q[$k]}/@@$vpos}
    done

    [[ $target =~ @@ ]] && for k in 0 1 2 3; do
      target=${target//@@$k/${q[$k]}}
    done

  }

  echo "$target"
}

declare -A __o
options="$(
  getopt --name "[ERROR]:i3fyra" \
    --options "s:faz:l:m:n:p:hv" \
    --longoptions "show:,force,float,hide:,layout:,array:,verbose,dryrun,move:,conid:,speed:,help,version," \
    -- "$@" || exit 98
)"

eval set -- "$options"
unset options

while true; do
  case "$1" in
    --show       | -s ) __o[show]="${2:-}" ; shift ;;
    --force      | -f ) __o[force]=1 ;; 
    --float      | -a ) __o[float]=1 ;; 
    --hide       | -z ) __o[hide]="${2:-}" ; shift ;;
    --layout     | -l ) __o[layout]="${2:-}" ; shift ;;
    --array      ) __o[array]="${2:-}" ; shift ;;
    --verbose    ) __o[verbose]=1 ;; 
    --dryrun     ) __o[dryrun]=1 ;; 
    --move       | -m ) __o[move]="${2:-}" ; shift ;;
    --conid      | -n ) __o[conid]="${2:-}" ; shift ;;
    --speed      | -p ) __o[speed]="${2:-}" ; shift ;;
    --help       | -h ) ___printhelp && exit ;;
    --version    | -v ) ___printversion && exit ;;
    -- ) shift ; break ;;
    *  ) break ;;
  esac
  shift
done

[[ ${__lastarg:="${!#:-}"} =~ ^--$|${0}$ ]] \
  && __lastarg="" 


main "${@}"


