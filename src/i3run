#!/usr/bin/env bash

___printversion(){
  
cat << 'EOB' >&2
i3run - version: 0.15
updated: 2021-05-28 by budRich
EOB
}


# environment variables
: "${I3RUN_BOTTOM_GAP:=10}"
: "${I3RUN_TOP_GAP:=10}"
: "${I3RUN_LEFT_GAP:=10}"
: "${I3RUN_RIGHT_GAP:=10}"


main(){

  declare -a acri   # options passed to i3list/i3get
  declare -A i3list # globals array

  for k in instance class title conid winid; do
    [[ -n ${__o[$k]} ]] \
      && acri+=("--$k" "${__o[$k]}")
  done ; unset k

  [[ -z ${acri[*]} ]] \
    && ERH "please specify a criteria"

  _array=$(i3list "${acri[@]}")
  eval "$_array"

  _command=${__o[command]:-$*}

  # if window doesn't exist, launch the command.
  if [[ -z ${i3list[TWC]} ]]; then
    launchcommand "$@"
  else
    focuswindow "$@"
  fi
}

___printhelp(){
  
cat << 'EOB' >&2
i3run - Run, Raise or hide windows in i3wm


SYNOPSIS
--------
i3run --instance|-i INSTANCE  [--summon|-s] [--nohide|-g]
i3run --class|-c    CLASS     [--rename|-x OLD_NAME] 
i3run --title|-t    TITLE     [--rename-instance OLD_NAME] [--rename-class OLD_NAME] [--rename-title OLD_NAME]
i3run --conid|-n    CON_ID    [--force|-f] [--FORCE|-F] 
i3run --winid|-d    CON_ID    [--command|-e COMMAND] [--mouse|-m]
i3run --help|-h
i3run --version|-v

OPTIONS
-------

--instance|-i INSTANCE  
Search for windows with the given INSTANCE


--summon|-s  
Instead of switching workspace, summon window to
current workspace


--nohide|-g  
Don't hide window/container if it's active.


--class|-c CLASS  
Search for windows with the given CLASS


--rename|-x OLD_NAME  
If the search criteria is --instance, the window
with instance: OLDNAME will get a new instance
name matching the criteria when it is created
(needs xdotool).

NB  
This option will not work reliably when using
multiple search criteria. When you want to do that
instead use:  
--rename-instance , --rename-class ,
--rename-title .


   i3run --instance budswin --rename sublime_main -- subl
   
   # when the command above is executed:
   # a window with the instance name: "budswin" will be searched for.
   # if no window is found the command: "subl" will get executed,
   # and when a window with the instance name: "sublime_main" is found,
   # the instance name of that window will get renamed to: "budswin"
   
   # the example below, will not work properly:  
   i3run --title bud --instance budswin --rename sublime_main -- subl
   
   # it will start like the first example, but if it
   # doesnt find the custom instance budswin, it will
   # try to search for a window with the TITLE sublime_main
   
   # do this instead:  
   i3run --title bud --instance budswin --rename-instance sublime_main -- subl




--title|-t TITLE  
Search for windows with the given TITLE


--rename-instance OLD_NAME  
explicitly rename the instance.


--rename-class OLD_NAME  
explicitly rename the class.


--rename-title OLD_NAME  
explicitly rename the title.


--conid|-n CON_ID  
Search for windows with the given CON_ID


--force|-f  
Execute COMMAND (--command), even if the window
already exist. But not when hiding a window.


--FORCE|-F  
Execute COMMAND (--command), even if the window
already exist.


--winid|-d CON_ID  

--command|-e COMMAND  
the recommended way of launching commands is to
do: i3run ... -- COMMAND

Example
-------



   # with --command:
   i3run --instance sublime_text --command 'subl && notify-send "sublime is started"'
   
   # with -- (recomended)
   i3run --instance sublime_text -- subl "&&"" notify-send "sublime is started"



Notice that you will need to escape some shell
builtins that effect the commandline (&&, ;, &, |,
|| ...) in the second example.


--mouse|-m  
The window will be placed on the location of the
mouse cursor when it is created or shown. (needs
xdotool)  


--help|-h  
Show help and exit.


--version|-v  
Show version and exit.
EOB
}


set -E
trap '[ "$?" -ne 98 ] || exit 98' ERR

ERX() { >&2 echo  "[ERROR] $*" ; exit 98 ;}
ERR() { >&2 echo  "[WARNING] $*"  ;}
ERM() { >&2 echo  "$*"  ;}
ERH(){
  ___printhelp >&2
  [[ -n "$*" ]] && printf '\n%s\n' "$*" >&2
  exit 98
}

focuswindow(){

  declare -i forcing
  local hvar

  forcing=$((__o[FORCE] ? 2 : __o[force] ? 1 : 0))
  
  # if target window is active, 
  if ((i3list[AWC] == i3list[TWC])); then
    
    # send it to the scratchpad
    if ((!__o[nohide])); then
      if [[ -z ${i3list[TWP]} ]]; then
        # keep floating state in a var
        i3-msg -q "[con_id=${i3list[TWC]}]" move scratchpad
        i3var set "hidden${i3list[TWC]}" "${i3list[TWF]}"
      else
        # if it is handled by i3fyra and active
        # hide the container
        i3fyra --force --hide "${i3list[TWP]}" --array "$_array"
      fi

     ((forcing == 2)) && [[ $_command ]] && {
       eval "$_command" > /dev/null 2>&1 & 
     }

    else

     ((forcing > 0)) && [[ $_command ]] && {
       eval "$_command" > /dev/null 2>&1 & 
     } 
    fi

  else # focus target window.
    # hvar can contain floating state of target
    hvar=$(i3var get "hidden${i3list[TWC]}")
    if [[ -n $hvar ]]; then
      # windows need to be floating on scratchpad
      # so to "restore" a tiling window we do this
      ((hvar == 1)) && fs=enable || fs=disable
      # clear the variable
      i3var set "hidden${i3list[TWC]}"
    else
      ((i3list[TWF] == 1)) && fs=enable || fs=disable
    fi
    
    if [[ -z ${i3list[TWP]} && ${i3list[WSA]} != "${i3list[WST]}" ]]; then
      # target is not handled by i3fyra and not active
      # TWP - target window parent container name
      # target is not on active workspace

      # WST == -1 , target window is on scratchpad
      if ((i3list[WST] == -1 || __o[summon])); then
        i3-msg -q "[con_id=${i3list[TWC]}]"   \
          move to workspace "${i3list[WAN]}", \
          floating $fs
          ((i3list[TWF] && __o[mouse])) && sendtomouse
      else
        i3-msg -q workspace "${i3list[WTN]}"
      fi
        
    elif ((i3list[WSA] != i3list[WST])); then
      # window is handled by i3fyra and not active
      # current ws is i3fyra WS
      if ((i3list[WSF] == i3list[WSA])); then
        # target window is in a hidden (LHI) container
        [[ ${i3list[TWP]} =~ [${i3list[LHI]}] ]] \
          && i3fyra --force --show "${i3list[TWP]}" --array "$_array"

      else # current ws is not i3fyra WS
        # WST == -1 , target window is on scratchpad
        if ((i3list[WST] == -1 || __o[summon])); then
          i3-msg -q "[con_id=${i3list[TWC]}]" \
            move to workspace "${i3list[WAN]}", floating $fs
            ((i3list[TWF] && __o[mouse])) && sendtomouse
        else # got to target windows workspace
          # WTN == name (string) of workspace
          i3-msg -q workspace "${i3list[WTN]}"
        fi
      fi
    fi

    i3-msg -q "[con_id=${i3list[TWC]}]" focus

   ((forcing > 0)) && [[ $_command ]] && {
     eval "$_command" > /dev/null 2>&1 & 
   }
  fi

  echo "${i3list[TWC]}"
}

launchcommand(){

  local winid conid k l
  declare -a xdtopt got

  if [[ $_command ]]; then
    eval "$_command" > /dev/null 2>&1 &
  else
    ERX i3run no command, no action
  fi

  if   [[ -n ${__o[rename]} ]]; then

    [[ ${acri[0]} = '--class'    ]] && xdtopt=("--class")
    [[ ${acri[0]} = '--instance' ]] && xdtopt=("--classname")
    [[ ${acri[0]} = '--title   ' ]] && xdtopt=("--name")

    xdtopt+=("${acri[1]}")
    acri[1]=${__o[rename]}

  elif [[ -n "${__o[rename-title]}${__o[rename-class]}${__o[rename-instance]}" ]]; then

    for k in title class instance ; do
      [[ ${__o[rename-$k]} ]] && {
        case "$k" in
          title    ) xdtopt+=(--name "${__o[$k]}")      ;;
          class    ) xdtopt+=(--class "${__o[$k]}")     ;;
          instance ) xdtopt+=(--classname "${__o[$k]}") ;;
        esac

        # when renaming, replace the criteria arg (--? + 1)
        # with the argument to the replace (OLD_NAME)
        for l in "${!acri[@]}"; do
          [[ ${acri[$l]} = --$k ]] && {
            acri[l+1]=${__o[rename-$k]} 
            break
          }
        done
      }

    done

  fi

  [[ -n "${xdtopt[*]}" ]] && {

    mapfile -t got <<< "$(i3get "${acri[@]}" -yr dn)"
    read -rs winid conid <<< "${got[@]}"

    xdotool \
      set_window "${xdtopt[@]}" "$winid"       \
      set_window --overrideredirect 1 "$winid" \
      set_window --overrideredirect 0 "$winid" \
      windowunmap "$winid"                     \
      windowmap   "$winid"                           
  }
  
  : "${conid:=$(i3get -y "${acri[@]}")}"
  
  ((__o[mouse])) && sendtomouse

  i3-msg -q "[con_id=$conid]" focus
  echo "$conid"
}

sendtomouse(){
  declare -i X Y newy newx tmpx tmpy breakx breaky

  eval "$(i3list "${acri[@]}")"

  i3-msg -q "[con_id=${i3list[TWC]}]" focus

  ((i3list[TWF])) && {
    breaky=$((i3list[WAH]-(I3RUN_BOTTOM_GAP+i3list[TWH])))
    breakx=$((i3list[WAW]-(I3RUN_RIGHT_GAP+i3list[TWW])))

    eval "$(xdotool getmouselocation --shell)"

    tmpy=$((Y-(i3list[TWH]/2)))
    tmpx=$((X-(i3list[TWW]/2))) 

    ((Y>(i3list[WAH]/2))) \
      && newy=$((tmpy>breaky
              ? breaky
              : tmpy)) \
      || newy=$((tmpy<I3RUN_TOP_GAP
              ? I3RUN_TOP_GAP
              : tmpy))

    ((X<(i3list[WAW]/2))) \
      && newx=$((tmpx<I3RUN_LEFT_GAP 
              ? I3RUN_LEFT_GAP 
              : tmpx)) \
      || newx=$((tmpx>breakx
              ? breakx 
              : tmpx))

    i3-msg -q "[con_id=${i3list[TWC]}]" \
      move absolute position $newx $newy
  }
}

declare -A __o
options="$(
  getopt --name "[ERROR]:i3run" \
    --options "i:sgc:x:t:n:fFd:e:mhv" \
    --longoptions "instance:,summon,nohide,class:,rename:,title:,rename-instance:,rename-class:,rename-title:,conid:,force,FORCE,winid:,command:,mouse,help,version," \
    -- "$@" || exit 98
)"

eval set -- "$options"
unset options

while true; do
  case "$1" in
    --instance   | -i ) __o[instance]="${2:-}" ; shift ;;
    --summon     | -s ) __o[summon]=1 ;; 
    --nohide     | -g ) __o[nohide]=1 ;; 
    --class      | -c ) __o[class]="${2:-}" ; shift ;;
    --rename     | -x ) __o[rename]="${2:-}" ; shift ;;
    --title      | -t ) __o[title]="${2:-}" ; shift ;;
    --rename-instance ) __o[rename-instance]="${2:-}" ; shift ;;
    --rename-class ) __o[rename-class]="${2:-}" ; shift ;;
    --rename-title ) __o[rename-title]="${2:-}" ; shift ;;
    --conid      | -n ) __o[conid]="${2:-}" ; shift ;;
    --force      | -f ) __o[force]=1 ;; 
    --FORCE      | -F ) __o[FORCE]=1 ;; 
    --winid      | -d ) __o[winid]="${2:-}" ; shift ;;
    --command    | -e ) __o[command]="${2:-}" ; shift ;;
    --mouse      | -m ) __o[mouse]=1 ;; 
    --help       | -h ) ___printhelp && exit ;;
    --version    | -v ) ___printversion && exit ;;
    -- ) shift ; break ;;
    *  ) break ;;
  esac
  shift
done

[[ ${__lastarg:="${!#:-}"} =~ ^--$|${0}$ ]] \
  && __lastarg="" 


main "${@}"


