#!/usr/bin/env bash

___printversion(){
  
cat << 'EOB' >&2
i3Kornhe - version: 0.5
updated: 2021-05-28 by budRich
EOB
}



main(){

  local next_mode

  # __o[verbose]=1

  ((__o[verbose])) && {
    declare -gi _stamp
    _stamp=$(date +%s%N)
    ERM $'\n'"---i3Kornhe $* start--- "
  }

  trap 'cleanup' EXIT

  declare -g  _msgstring  # combined i3-msg
  declare -g  _array      # output from i3list
  declare -Ag i3list      # i3list array
  declare -Ag last        # array with last i3Kornhe info

  # mode is first arg, size|move|x|0-9 -> s|m|x|0-9
  next_mode="${1:0:1}" ; next_mode="${next_mode,,}"

  # last arg is direction, left|right|up|down -> l|r|u|d
  _direction=${__lastarg:0:1} ; _direction=${_direction,,}

  # remove all none digits from --speed arg
  : "${_speed:=${__o[speed]//[!0-9]}}"
  (( _speed >= 0 )) || _speed=10

  [[ ${_array:=${__o[array]}} ]] || {
    _array=$(i3list ${__o[json]:+--json "${__o[json]}"})
  }

  eval "$_array"

  # we store i3Korhne info a variable like this:
  # MODE:con_id:corner:original_window_title
  re='(s|m):([0-9]+):([^:]+):(.+)'

  [[ $(i3var get i3Kornhe) =~ $re ]] && last=(
    [mode]=${BASH_REMATCH[1]}
    [conid]=${BASH_REMATCH[2]}
    [corner]=${BASH_REMATCH[3]}
    [title]=${BASH_REMATCH[4]}
  )

  if [[ $_direction =~ ^[1-9]$ ]]; then
    next_mode=m
  elif [[ $next_mode = s && ${last[mode]} = s ]]; then
    last[corner]=""
  elif [[ $next_mode != x && $next_mode = $_direction ]]; then
    next_mode=${last[mode]:-x}
  fi

  # reset to default mode if its not the same window
  # having focus as when we initiated i3Korhne.
  [[ $next_mode = x ]] && exit_mode

  # i3list[AWF] # active window floating (1|0)
  if ((i3list[AWF])); then
    modify_floating
  else
    modify_tiled
  fi
}

___printhelp(){
  
cat << 'EOB' >&2
i3Kornhe - move and resize windows gracefully


SYNOPSIS
--------
i3Kornhe DIRECTION [--verbose] [--array ARRAY] [--json JSON]
i3Kornhe move [--speed|-p SPEED] [DIRECTION]
i3Kornhe size [--speed|-p SPEED] [DIRECTION]
i3Kornhe 1-9 [--margin INT] [--margin-top INT] [--margin-bottom INT] [--margin-left INT] [--margin-right INT]
i3Kornhe x
i3Kornhe --help|-h
i3Kornhe --version|-v

OPTIONS
-------

--verbose  

--array ARRAY  

--json JSON  

--speed|-p SPEED  
Sets speed or distance in pixels to use when
moving and resizing the windows.


--margin INT  

--margin-top INT  
Override the top-margin value. Defaults to the
value of --margin (which is 5)



--margin-bottom INT  
Override the bottom-margin value. Defaults to the
value of --margin (which is 5)


--margin-left INT  
Override the left-margin value. Defaults to the
value of --margin (which is 5)


--margin-right INT  
Override the right-margin value. Defaults to the
value of --margin (which is 5)


--help|-h  
Show help and exit.


--version|-v  
Show version and exit.
EOB
}


cleanup() {

  ((__o[verbose])) && ERM "f ${FUNCNAME[0]}()"

  local qflag

  ((__o[verbose])) || qflag='-q'

  [[ -n $_msgstring ]] && i3-msg "${qflag:-}" "$_msgstring"

  ((__o[verbose])) && {
    local delta=$(( ($(date +%s%N)-_stamp) /1000 ))
    local time=$(((delta / 1000) % 1000))
    ERM  "---i3Kornhe done: ${time}ms---"
  }
}

set -E
trap '[ "$?" -ne 98 ] || exit 98' ERR

ERX() { >&2 echo  "[ERROR] $*" ; exit 98 ;}
ERR() { >&2 echo  "[WARNING] $*"  ;}
ERM() { >&2 echo  "$*"  ;}
ERH(){
  ___printhelp >&2
  [[ -n "$*" ]] && printf '\n%s\n' "$*" >&2
  exit 98
}

exit_mode(){

  ((__o[verbose])) && ERM "f ${FUNCNAME[0]}()"

  i3var set i3Kornhe
  messy "mode default"
  messy "[con_id=${last[conid]}] title_format ${last[title]:-%title}"

  exit
}

messy() {
  # arguments are valid i3-msg arguments
  # execute all commands at once in cleanup()
  (( __o[verbose] )) && ERM "m $*"
  (( __o[dryrun]  )) || _msgstring+="$*;"
}

modify_floating() {

  ((__o[verbose])) && ERM "f ${FUNCNAME[0]}()"

  local title_format corner mark last_title

  declare -i trgx trgy trgw trgh conid
  declare -i margin_t margin_b margin_l margin_r

  trgx=${i3list[AWX]} trgy=${i3list[AWY]}
  trgw=${i3list[AWW]} trgh=${i3list[AWH]}

  conid=${last[conid]:-${i3list[AWC]}}

  # m - move
  if [[ $next_mode = m ]]; then

    title_format="MOVE "

    margin_t=${__o[margin-top]:-${__o[margin]:-5}} 
    margin_b=${__o[margin-bottom]:-${__o[margin]:-5}}
    margin_l=${__o[margin-left]:-${__o[margin]:-5}} 
    margin_r=${__o[margin-right]:-${__o[margin]:-5}}

    # else just move the container
    case "$_direction" in
      l ) ((trgx-=_speed)) ;;
      r ) ((trgx+=_speed)) ;;
      u ) ((trgy-=_speed)) ;;
      d ) ((trgy+=_speed)) ;;
      1 )
        trgx=$(( i3list[WAX]+margin_l ))
        trgy=$(( i3list[WAY]+margin_t ))
      ;;

      2 )
        trgx=$(( i3list[WAX]+(i3list[WAW]/2)-(i3list[AWW]/2) ))
        trgy=$(( i3list[WAY]+margin_t ))
      ;;

      3 )
        trgx=$(( i3list[WAX]+( i3list[WAW]-(i3list[AWW]+margin_r) ) ))
        trgy=$(( i3list[WAY]+margin_t ))
      ;;

      4 )
        trgx=$(( i3list[WAX]+margin_l ))
        trgy=$(( i3list[WAY]+(i3list[WAH]/2)-(i3list[AWH]/2) ))
      ;;

      5 )
        trgx=$(( i3list[WAX]+(i3list[WAW]/2)-(i3list[AWW]/2) ))
        trgy=$(( i3list[WAY]+(i3list[WAH]/2)-(i3list[AWH]/2) ))
      ;;

      6 )
        trgx=$(( i3list[WAX]+( i3list[WAW]-(i3list[AWW]+margin_r) ) ))
        trgy=$(( i3list[WAY]+(i3list[WAH]/2)-(i3list[AWH]/2) ))
      ;;

      7 )
        trgx=$(( i3list[WAX]+margin_l ))
        trgy=$(( i3list[WAY]+( i3list[WAH]-(i3list[AWH]+margin_b) ) ))
      ;;

      8 )
        trgx=$(( i3list[WAX]+(i3list[WAW]/2)-(i3list[AWW]/2) ))
        trgy=$(( i3list[WAY]+( i3list[WAH]-(i3list[AWH]+margin_b) ) ))
      ;;

      9 )
        trgx=$(( i3list[WAX]+( i3list[WAW]-(i3list[AWW]+margin_r) ) ))
        trgy=$(( i3list[WAY]+( i3list[WAH]-(i3list[AWH]+margin_b) ) ))
      ;;

    esac

    messy "[con_id=$conid] move position $trgx $trgy"
    corner=move

  # s - resize
  elif [[ $next_mode = s ]]; then

    [[ ${last[corner]} = move ]] && last[corner]=""
    
    [[ ${corner:=${last[corner]}} ]] || {
      case "$_direction" in
        l ) corner="topleft"     ;;
        r ) corner="bottomright" ;;
        u ) corner="topright"    ;;
        d ) corner="bottomleft"  ;;
      esac
    }

    title_format="RESIZE $corner "

    case "$corner" in
      topleft )
        case "$_direction" in
          u ) floatsize="grow up"      ;;
          d ) floatsize="shrink up"    ;;
          l ) floatsize="grow left"    ;;
          r ) floatsize="shrink left"  ;;
        esac
      ;;

      topright )
        case "$_direction" in
          u ) floatsize="grow up"      ;;
          d ) floatsize="shrink up"    ;;
          l ) floatsize="shrink right" ;;
          r ) floatsize="grow right"   ;;
        esac
      ;;

      bottomleft )
        case "$_direction" in
          u ) floatsize="shrink down"   ;;
          d ) floatsize="grow down"     ;;
          l ) floatsize="grow left"     ;;
          r ) floatsize="shrink left"   ;;
        esac
      ;;

      bottomright )
        case "$_direction" in
          u ) floatsize="shrink down"   ;;
          d ) floatsize="grow down"     ;;
          l ) floatsize="shrink right"  ;;
          r ) floatsize="grow right"    ;;
        esac
      ;;


    esac
    
    i3-msg -q "resize $floatsize $_speed"
    eval "$(i3list)"
    trgx=${i3list[AWX]} trgy=${i3list[AWY]}
    trgh=${i3list[AWH]} trgw=${i3list[AWW]}

  fi

  title_format+="x:$trgx y:$trgy w:$trgw h:$trgh"

  messy "[con_id=$conid] title_format $title_format"

  # MODE:con_id:corner:original_window_title
  last_title=${last[title]:-$(i3get -n "${i3list[AWC]}" -r o)}
  mark="$next_mode:$conid:$corner:${last_title:-%title}"
  i3var set i3Kornhe "$mark"
  messy mode sizemode

}

modify_tiled() {

  local tilesize

  ((__o[verbose])) && ERM "f ${FUNCNAME[0]}()"

  # m - move
  if [[ $next_mode = m ]]; then

    # if window is tiled and active workspace is i3fyra
    (( i3list[AWF]!=1 && i3list[WSA]==i3list[WSF])) \
      && exec i3fyra --move "$_direction" --array "$_array"

    # else just move the container
    case "$_direction" in
      l ) _direction=left  ;;
      r ) _direction=right ;;
      u ) _direction=up    ;;
      d ) _direction=down  ;;
    esac

    messy "move $_direction"

  # s - resize
  elif [[ $next_mode = s ]]; then

    case "$_direction" in
      l ) tilesize="shrink width"  ;;
      r ) tilesize="grow width"    ;;
      u ) tilesize="grow height"   ;;
      d ) tilesize="shrink height" ;;
    esac

    messy "resize $tilesize $_speed px"
  fi

}

declare -A __o
options="$(
  getopt --name "[ERROR]:i3Kornhe" \
    --options "p:hv" \
    --longoptions "verbose,array:,json:,speed:,margin:,margin-top:,margin-bottom:,margin-left:,margin-right:,help,version," \
    -- "$@" || exit 98
)"

eval set -- "$options"
unset options

while true; do
  case "$1" in
    --verbose    ) __o[verbose]=1 ;; 
    --array      ) __o[array]="${2:-}" ; shift ;;
    --json       ) __o[json]="${2:-}" ; shift ;;
    --speed      | -p ) __o[speed]="${2:-}" ; shift ;;
    --margin     ) __o[margin]="${2:-}" ; shift ;;
    --margin-top ) __o[margin-top]="${2:-}" ; shift ;;
    --margin-bottom ) __o[margin-bottom]="${2:-}" ; shift ;;
    --margin-left ) __o[margin-left]="${2:-}" ; shift ;;
    --margin-right ) __o[margin-right]="${2:-}" ; shift ;;
    --help       | -h ) ___printhelp && exit ;;
    --version    | -v ) ___printversion && exit ;;
    -- ) shift ; break ;;
    *  ) break ;;
  esac
  shift
done

[[ ${__lastarg:="${!#:-}"} =~ ^--$|${0}$ ]] \
  && __lastarg="" 


main "${@:-}"


