#!/usr/bin/env bash

___printversion(){
  
cat << 'EOB' >&2
i3Kornhe - version: 0.667
updated: 2021-08-29 by budRich
EOB
}


# environment variables
: "${XDG_RUNTIME_DIR:=/tmp}"
: "${I3_KORNHE_FIFO_FILE:=$XDG_RUNTIME_DIR/i3ass/i3Kornhe.fifo}"


main(){

  declare -g  _next_mode
  declare -g  _direction
  declare -ig _speed

  declare -g  _msgstring  # combined i3-msg
  declare -g  _array      # output from i3list
  declare -g  _qflag      # -q option passed to i3-msg
  declare -g  _stamp      # millisecond timestamp
  declare -Ag i3list      # i3list array
  declare -Ag last        # array with last i3Kornhe info

  # suffix the FIFO filename with the same suffix
  # as the i3-socketpath to ensure we are not
  # sending commands to a fifo being created in
  # a different session.
  until [[ ${sp:=$(i3 --get-socketpath)} ]]
    do sleep .1
  done

  I3_KORNHE_FIFO_FILE+=${sp##*.}

  # __o[verbose]=1
  ((__o[verbose])) || _qflag='-q'

  # mode is first arg, size|move|x|0-9 -> s|m|x|0-9
  _next_mode="${1:0:1}" ; _next_mode="${_next_mode,,}"
  
  # last arg is direction, left|right|up|down -> l|r|u|d
  _direction=${__lastarg:0:1} ; _direction=${_direction,,}

  # remove all none digits from --speed arg
  _speed=${__o[speed]//[!0-9]}
  ((_speed >= 0)) || _speed=10

  [[ -p $I3_KORNHE_FIFO_FILE ]] && {
    printf '%s %s %s\n' "$_direction" "$_next_mode" "$_speed" >> "$I3_KORNHE_FIFO_FILE" &
    exit
  }

  [[ -f ${I3_KORNHE_FIFO_FILE}.lock ]] && exit
  touch ${I3_KORNHE_FIFO_FILE}.lock

  ((__o[verbose])) && {
    declare -gi _stamp
    _stamp=$(date +%s%N)
    ERM $'\n'"---i3Kornhe $* start--- "
  }

  [[ ${_array:=${__o[array]}} ]] \
    || _array=$(i3list ${__o[json]:+--json "${__o[json]}"})

  eval "$_array"

  # if request is to move a tiled window
  # on the i3fyra (WSF) workspace, we redirect
  # the action to i3fyra
  [[ $_next_mode = m ]] && (( i3list[AWF]!=1 && i3list[WSA]==i3list[WSF])) && {
    rm -f "$I3_KORNHE_FIFO_FILE"*
    exec i3fyra --move "$_direction" --array "$_array"
  }

  rm -f "$I3_KORNHE_FIFO_FILE"
  mkdir -p "${I3_KORNHE_FIFO_FILE%/*}"
  mkfifo "$I3_KORNHE_FIFO_FILE"

  printf '%s %s %s\n' "$_direction" "$_next_mode" "$_speed" >> "$I3_KORNHE_FIFO_FILE" &
  trap 'cleanup' EXIT

  # when modifying FLOATING windows we enter a i3
  # binding mode, and change the title format of 
  # the active window to display mode type and
  # coordinates. We need to keep the original title
  # and use i3var for that.
  if ((i3list[AWF])); then

    last=(
      [title]=$(i3get -r o)
      [mode]=$_next_mode
      [conid]=${i3list[AWC]}
    )

  # when i3Kornhe is used to modify a TILED window
  # we don't enter a i3 binding mode, and it is
  # only when we exit the binding mode that the
  # fifo file is destroyed. Therefor we set this
  # autodestruct timer in the background.
  # It is not needed if the user have set up
  # --release keybindings, but there is no good
  # way to know if they have and in case they haven't
  # we keep this.
  else
    (
      sleep 1
      [[ -p $I3_KORNHE_FIFO_FILE ]] \
        && echo EXIT >> "$I3_KORNHE_FIFO_FILE"
    ) &
  fi

  rm ${I3_KORNHE_FIFO_FILE}.lock

  while [[ -p $I3_KORNHE_FIFO_FILE ]]; do
    while read -rst 1 _direction _next_mode _speed ; do

      [[ $_direction ]] || continue

      if [[ $_direction = EXIT || $_direction = RELEASE ]]; then
        rm -f "$I3_KORNHE_FIFO_FILE"* ; break 2
      elif [[ $_direction = x ]]; then
        exit_mode
        rm -f "$I3_KORNHE_FIFO_FILE"* ; break 2
      elif [[ $_direction =~ ^[1-9]$ ]]; then
        _next_mode=m
      elif [[ $_next_mode = s && ${last[mode]} = s ]]; then
          last[corner]=""
      elif [[ $_next_mode != x && $_next_mode = "$_direction" ]]; then
        _next_mode=${last[mode]:-x}
      fi

      if ((i3list[AWF])); then
        # this is needed when we go from size mode
        # to move mode, otherwise the coordinates
        # from before the size operations will be used
        [[ ${last[mode]} = "$_next_mode" ]] || eval "$(i3list)"
        modify_floating
      else
        modify_tiled
      fi

    done < "$I3_KORNHE_FIFO_FILE"

    ((i3list[AWF])) && {
      # we only append the window geometry to the 
      # window title if the window is being moved.
      # to correctly display geometry from a resize
      # operation we need to query i3list every time.
      [[ ${last[mode]} = m ]] \
        && title_format+="x:${i3list[AWX]} y:${i3list[AWY]} w:${i3list[AWW]} h:${i3list[AWH]}"
      
      messy "[con_id=${last[conid]}] title_format $title_format"
      messy mode sizemode
    }

    [[ $_msgstring ]] && i3-msg "${_qflag:-}" "$_msgstring"
    _msgstring=''

  done
}

___printhelp(){
  
cat << 'EOB' >&2
i3Kornhe - move and resize windows gracefully


SYNOPSIS
--------
i3Kornhe DIRECTION [--verbose] [--array ARRAY] [--json JSON]
i3Kornhe move [--speed|-p SPEED] [DIRECTION]
i3Kornhe size [--speed|-p SPEED] [DIRECTION]
i3Kornhe 1-9 [--margin INT] [--margin-top INT] [--margin-bottom INT] [--margin-left INT] [--margin-right INT]
i3Kornhe x
i3Kornhe --help|-h
i3Kornhe --version|-v

OPTIONS
-------

--verbose  

--array ARRAY  

--json JSON  

--speed|-p SPEED  
Sets speed or distance in pixels to use when
moving and resizing the windows.


--margin INT  

--margin-top INT  
Override the top-margin value. Defaults to the
value of --margin (which is 5)



--margin-bottom INT  
Override the bottom-margin value. Defaults to the
value of --margin (which is 5)


--margin-left INT  
Override the left-margin value. Defaults to the
value of --margin (which is 5)


--margin-right INT  
Override the right-margin value. Defaults to the
value of --margin (which is 5)


--help|-h  
Show help and exit.


--version|-v  
Show version and exit.
EOB
}


cleanup() {

  ((__o[verbose])) && ERM "f ${FUNCNAME[0]}()"

  [[ -n $_msgstring ]] && i3-msg "${_qflag:-}" "$_msgstring"

  ((__o[verbose])) && {
    local delta=$(( ($(date +%s%N)-_stamp) /1000 ))
    local time=$(((delta / 1000) % 1000))
    ERM  "---i3Kornhe done: ${time}ms---"
  }
}

set -E
trap '[ "$?" -ne 98 ] || exit 98' ERR

ERX() { >&2 echo  "[ERROR] $*" ; exit 98 ;}
ERR() { >&2 echo  "[WARNING] $*"  ;}
ERM() { >&2 echo  "$*"  ;}
ERH(){
  ___printhelp >&2
  [[ -n "$*" ]] && printf '\n%s\n' "$*" >&2
  exit 98
}

exit_mode(){
  ((__o[verbose])) && ERM "f ${FUNCNAME[0]}()"

  [[ ${last[conid]} ]] || last[conid]=$(i3get)
  
  messy "mode default"

  # reset title to old title_format or actual title
  messy "[con_id=${last[conid]}]" \
        "title_format ${last[title]:-%title}"
}

messy() {
  # arguments are valid i3-msg arguments
  # execute all commands at once in cleanup()
  (( __o[verbose] )) && ERM "m $*"
  (( __o[dryrun]  )) || _msgstring+="$*;"
}

modify_floating() {

  ((__o[verbose])) && ERM "f ${FUNCNAME[0]}()"

  local corner cv ch
  declare -i margin_t margin_b margin_l margin_r conid

  conid=${last[conid]:=${i3list[AWC]}}

  # m - move
  if [[ $_next_mode = m ]]; then

    title_format="MOVE "

    case "$_direction" in
      l ) ((i3list[AWX]-=_speed)) ;;
      r ) ((i3list[AWX]+=_speed)) ;;
      u ) ((i3list[AWY]-=_speed)) ;;
      d ) ((i3list[AWY]+=_speed)) ;;
      1|2|3|4|5|6|7|8|9 )

        margin_t=${__o[margin-top]:-${__o[margin]:-5}} 
        margin_b=${__o[margin-bottom]:-${__o[margin]:-5}}
        margin_l=${__o[margin-left]:-${__o[margin]:-5}} 
        margin_r=${__o[margin-right]:-${__o[margin]:-5}}
        
        case "$_direction" in
          1|2|3 ) i3list[AWY]=$(( i3list[WAY]+margin_t )) ;;
          4|5|6 ) i3list[AWY]=$(( i3list[WAY]+(i3list[WAH]/2)-(i3list[AWH]/2) )) ;;
          7|8|9 ) i3list[AWY]=$(( i3list[WAY]+( i3list[WAH]-(i3list[AWH]+margin_b) ) )) ;;
        esac

        case "$_direction" in
          1|4|7 ) i3list[AWX]=$(( i3list[WAX]+margin_l )) ;;
          2|5|8 ) i3list[AWX]=$(( i3list[WAX]+(i3list[WAW]/2)-(i3list[AWW]/2) )) ;;
          3|6|9 ) i3list[AWX]=$(( i3list[WAX]+( i3list[WAW]-(i3list[AWW]+margin_r) ) )) ;;
        esac
      ;;

    esac

    corner=move
    messy "[con_id=$conid] move position ${i3list[AWX]} ${i3list[AWY]}"

  elif [[ $_next_mode = s ]]; then

    if [[ ${last[corner]} =~ ^b|t ]]; then
      corner=${last[corner]}
    else
      _speed=0
      case "$_direction" in
        l ) corner="topleft"     ;;
        r ) corner="bottomright" ;;
        u ) corner="topright"    ;;
        d ) corner="bottomleft"  ;;
      esac
    fi

    title_format="RESIZE $corner"

    [[ $corner =~ (top|bottom)(left|right) ]] \
      && cv=${BASH_REMATCH[1]} ch=${BASH_REMATCH[2]} 
      
    if   [[ $cv = top && $_direction = u ]]; then
      resize_as="grow up"
    elif [[ $cv = top && $_direction = d ]]; then
      resize_as="shrink up"
    elif [[ $cv = bottom && $_direction = u ]]; then
      resize_as="shrink down"
    elif [[ $cv = bottom && $_direction = d ]]; then
      resize_as="grow down"
    fi

    if   [[ $ch = left && $_direction = l ]]; then
      resize_as="grow left"
    elif [[ $ch = left && $_direction = r ]]; then
      resize_as="shrink left"
    elif [[ $ch = right && $_direction = l ]]; then
      resize_as="shrink right"
    elif [[ $ch = right && $_direction = r ]]; then
      resize_as="grow right"
    fi

    ((_speed)) && messy "[con_id=$conid] resize $resize_as $_speed px"

  fi

  last=(
        [mode]=$_next_mode
        [conid]=$conid
        [corner]=$corner
        [title]=${last[title]:-%title}
       )
}

modify_tiled() {

  ((__o[verbose])) && ERM "f ${FUNCNAME[0]}()"

  if [[ $_next_mode = m ]]; then

    case "$_direction" in
      l ) _direction=left  ;;
      r ) _direction=right ;;
      u ) _direction=up    ;;
      d ) _direction=down  ;;
    esac

    messy "move $_direction"
    echo EXIT >> "$I3_KORNHE_FIFO_FILE" &

  elif [[ $_next_mode = s ]]; then

    case "$_direction" in
      l ) messy "resize shrink width $_speed px" ;;
      r ) messy "resize grow width $_speed px" ;;
      u ) messy "resize grow height $_speed px" ;;
      d ) messy "resize shrink height $_speed px" ;;
    esac

  fi

}

declare -A __o
options="$(
  getopt --name "[ERROR]:i3Kornhe" \
    --options "p:hv" \
    --longoptions "verbose,array:,json:,speed:,margin:,margin-top:,margin-bottom:,margin-left:,margin-right:,help,version," \
    -- "$@" || exit 98
)"

eval set -- "$options"
unset options

while true; do
  case "$1" in
    --verbose    ) __o[verbose]=1 ;; 
    --array      ) __o[array]="${2:-}" ; shift ;;
    --json       ) __o[json]="${2:-}" ; shift ;;
    --speed      | -p ) __o[speed]="${2:-}" ; shift ;;
    --margin     ) __o[margin]="${2:-}" ; shift ;;
    --margin-top ) __o[margin-top]="${2:-}" ; shift ;;
    --margin-bottom ) __o[margin-bottom]="${2:-}" ; shift ;;
    --margin-left ) __o[margin-left]="${2:-}" ; shift ;;
    --margin-right ) __o[margin-right]="${2:-}" ; shift ;;
    --help       | -h ) ___printhelp && exit ;;
    --version    | -v ) ___printversion && exit ;;
    -- ) shift ; break ;;
    *  ) break ;;
  esac
  shift
done

[[ ${__lastarg:="${!#:-}"} =~ ^--$|${0}$ ]] \
  && __lastarg="" 


main "${@:-}"


