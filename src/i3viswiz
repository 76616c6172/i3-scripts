#!/usr/bin/env bash

___printversion(){
  
cat << 'EOB' >&2
i3viswiz - version: 0.51
updated: 2021-06-07 by budRich
EOB
}



main(){

  # __o[verbose]=1

  ((__o[verbose])) && {
    declare -gi _stamp
    _stamp=$(date +%s%N)
    ERM $'\n'"---i3viswiz start---"
  }

  trap 'cleanup' EXIT

  arg_target=${__lastarg:-X}

    if ((__o[title]));       then arg_type=name
  elif ((__o[titleformat])); then arg_type=title_format
  elif ((__o[parent]));      then arg_type=i3fyracontainer
  elif ((__o[instance]));    then arg_type=instance
  elif ((__o[class]));       then arg_type=class
  elif ((__o[winid]));       then arg_type=winid

  elif [[ $arg_target = X ]]; then
    arg_type=instance
  else
    arg_type="direction"

    arg_target="${arg_target,,}"
    arg_target="${arg_target:0:1}"

    [[ $arg_target =~ l|r|u|d ]] \
      || ERH "$__lastarg not valid direction (l|r|u|d)"
  fi

  : "${__o[json]:=$(i3-msg -t get_tree)}"
  : "${__o[debug]:=LIST}"
  : "${__o[debug-format]:=%k=%v }"
  arg_gap=$((__o[gap] > 0 ? __o[gap] : 5))

  # check if focus_wrap workspace is set
  # by looking for a mark on root container (i3var)
  # if no mark exist, check config, set the mark
  re='^\{"id":([0-9]+)[^[]+\[([^]]*"focus_wrap=([^"]*)"[^]]*)?\]'
  [[ ${__o[json]} =~ $re ]] || {
    i3-msg -t get_config | grep -E 'focus_wrapping\s+workspace' > /dev/null \
      && wrapping=workspace

    i3var set focus_wrap "${wrapping:-normal}"
  }

  result=$(
    # <<<    - content of string __o[json] will be input  to command awk
    # -f <() - output of awklib will be interpreted as file containg AWK script
    # FS     - change Field  Separator to ":" (from whitespace)
    # RS     - change Record Separator to "," (from linebreak)
    # arg_   - these variables is available in the AWK script
    <<< "${__o[json]}" awk -f <(awklib) FS=: RS=, \
    arg_type="$arg_type" arg_gap="$arg_gap" arg_target="$arg_target" \
    arg_debug="${__o[debug]}" arg_debug_format="${__o[debug-format]}"
  )
  
  if [[ $result =~ ^floating ]]; then

    case "$arg_target" in
      l|u ) direction=prev   ;;
      r|d ) direction=next   ;;
      *   ) ERX "$arg_target not valid direction (l|r|u|d)" ;;
    esac

    messy i3-msg -q focus $direction

  elif [[ $arg_type != direction && ! ${__o[focus]} ]]; then
    echo "$result"
  elif [[ $result =~ ^[0-9]+ ]]; then

    read -r target_id active_id root_id marked_id <<< "$result"

    [[ $arg_type = direction ]] && {

      # i3var set viswiz-last-direction "$active_id"
      # manually update i3vars for performance reasons
      variable_name=i3viswiz-last-direction
      new_mark="${variable_name}=$active_id"

      # this will remove the old mark
      [[ $marked_id ]] && {
        old_mark="${variable_name}=$marked_id"
        messy "[con_mark=$old_mark] mark --toggle --add $old_mark"
      }

      messy "[con_id=$root_id] mark --add $new_mark"

    }

    messy "[con_id=$target_id]" focus
  else
    ERX "focus failed. '$result' doesn't make any sense"
  fi
}

___printhelp(){
  
cat << 'EOB' >&2
i3viswiz - Professional window focus for i3wm


SYNOPSIS
--------
i3viswiz [--gap|-g GAPSIZE] DIRECTION 
i3viswiz --title|-t       [--gap|-g GAPSIZE] [DIRECTION|TARGET] [--focus|-f] 
i3viswiz --instance|-i    [--gap|-g GAPSIZE] [DIRECTION|TARGET] [--focus|-f]
i3viswiz --class|-c       [--gap|-g GAPSIZE] [DIRECTION|TARGET] [--focus|-f]
i3viswiz --titleformat|-o [--gap|-g GAPSIZE] [DIRECTION|TARGET] [--focus|-f]
i3viswiz --winid|-d       [--gap|-g GAPSIZE] [DIRECTION|TARGET] [--focus|-f]
i3viswiz --parent|-p      [--gap|-g GAPSIZE] [DIRECTION|TARGET] [--focus|-f]
i3viswiz [--json JSON] [--debug VARLIST] [--debug-format FORMAT] [--verbose]
i3viswiz --help|-h
i3viswiz --version|-v

OPTIONS
-------

--gap|-g TARGET  
Set GAPSIZE (defaults to 5). GAPSIZE is the
distance in pixels from the current window where
new focus will be searched.  


--title|-t  
If TARGET matches the TITLE of a visible window,
that windows  CON_ID will get printed to stdout.
If no TARGET is specified, a list of all tiled
windows will get printed with  TITLE as the last
field of each row.


--focus|-f  
When used in conjunction with: --titleformat,
--title, --class, --instance, --winid or --parent.
The CON_ID of TARGET window will get focused if it
is visible.


--instance|-i  
If TARGET matches the INSTANCE of a visible
window, that windows  CON_ID will get printed to
stdout. If no TARGET is specified, a list of all
tiled windows will get printed with  INSTANCE as
the last field of each row.


--class|-c  
If TARGET matches the CLASS of a visible window,
that windows  CON_ID will get printed to stdout.
If no TARGET is specified, a list of all tiled
windows will get printed with  CLASS as the last
field of each row.


--titleformat|-o  
If TARGET matches the TITLE_FORMAT of a visible
window, that windows  CON_ID will get printed to
stdout. If no TARGET is specified, a list of all
tiled windows will get printed with  TITLE_FORMAT
as the last field of each row.


--winid|-d  
If TARGET matches the WIN_ID of a visible window,
that windows  CON_ID will get printed to stdout.
If no TARGET is specified, a list of all tiled
windows will get printed with  WIN_ID as the last
field of each row.



--parent|-p  
If TARGET matches the PARENT of a visible window,
that windows  CON_ID will get printed to stdout.
If no TARGET is specified, a list of all tiled
windows will get printed with  PARENT as the last
field of each row.


--json JSON  
use JSON instead of output from  i3-msg -t
get_tree


--debug VARLIST  
VARLIST is used to determine what to output. By
default the value of VARLIST is: LIST . Available
units are:  


   wall         | none|(up|left|down|right-)(workspace|area)
   trgcon       | container id of the window to be focused
   trgpar       | name of i3fyra container target container is located in
   gap          | internal gap value used
   sw           | active workspace width
   sh           | active workspace height
   sx           | active workspace x position
   sy           | active workspace y position
   trgx         | target windows x position
   trgy         | target windows y position
   grouplayout  | active windows parent container layout (tabbed|splitv|splith|stacked)
   groupid      | active windows parent container ID
   grouppos     | active windows position relative to its sibling containers
   groupsize    | number of child containers in active windows parent container
   firstingroup | container ID of the first child in active windows parent container
   lastingroup  | container ID of the last child in active windows parent container
   LIST         | prints a table with all visible windows
   ALL          | all the above combined



Multiple units can be used if comma separated.

Example:  

   $ i3viswiz --instance u --debug gap,wall,grouppos
   gap=5 wall=up-area grouppos=1 




--debug-format FORMAT  
The default value of FORMAT is "%k=%v ".  %k is
translated to the key/unit name, and %v to the
value.  

Example:  

   $ i3viswiz --instance u --debug gap,wall,grouppos --debug-format "%v\n"
   5
   up-area
   1 




--verbose  
If set, more stuff gets printed to STDERR during
the execution of the script.

Example:  

   $ i3viswiz --instance u --debug gap --verbose 
   
   ---i3viswiz start---
   gap=5 
   f cleanup()
   ---i3viswiz done: 14ms---




--help|-h  
Show help and exit.


--version|-v  
Show version and exit.
EOB
}


awklib() {
cat << 'EOB'
END{

  for (wsid in visible_workspaces)
    listvis(wsid)

  # commandline example:
  #   i3viswiz down  (arg_target=d arg_type=direction)
  #   i3viswiz -i d  (arg_target=d arg_type=instance)
  if (arg_target ~ /^(l|r|u|d)$/) {

    if (ac[active_container_id]["floating"] == 1) {
      target_container="floating"
      print_us["trgcon"]=active_container_id
      print_us["trgpar"]="floating"
    } else {


      target_container=find_window(arg_target)

      # if we cannot find a window in the given direction
      # try again with increased gapsize.
      if (target_container == "") {
        arg_gap=arg_gap+30
        target_container=find_window(arg_target)
      }

      print_us["trgcon"]=target_container
      print_us["trgpar"]=ac[target_container]["i3fyracontainer"]
    }

    if (arg_type == "direction") {
      print target_container, active_container_id, root_id, last_direction_id
      exit
    }
  }

  # commandline example:
  #   i3viswiz -i firefox (arg_target=firefox arg_type=instance)
  else if (arg_target !~ /^(l|r|u|d|X)$/) {
    for (conid in visible_containers) {
      if (ac[conid][arg_type] ~ arg_target) {
        print conid
        exit
      }
    }
    exit
  }

  # commandline example:
  #   i3viswiz -i firefox   (arg_target=X arg_type=instance)
  #   i3viswiz -i firefox d (arg_target=d arg_type=instance)

  print_us["gap"]=arg_gap

  if (arg_debug == "ALL") {
    for (k in print_us) {
      v=gensub(/%k/,k,1,arg_debug_format)
      debug_out=debug_out gensub(/%v/,print_us[k],1,v)
    }

    print debug_out
    arg_debug="LIST"
  }

  else if (arg_debug != "LIST") {
    split(arg_debug,debug_vars,",")
    for (k in debug_vars) {
      if (debug_vars[k] in print_us) {
        v=gensub(/%k/,debug_vars[k],1,arg_debug_format)
        var=gensub(/^"|"$/,"","g",print_us[debug_vars[k]])
        debug_out=debug_out gensub(/%v/,var,1,v)
      }
    }

    print debug_out
  }

  if (arg_debug !~ /LIST/)
    exit
  

  split("x y w h",geo," ")
  for (conid in visible_containers) {
    
    printf("%s %d ", (conid==active_container_id ? "*" : "-" ), conid)
    cop=outputs[ac[conid]["output"]] # output of current container          
    printf("ws: %d ", ws=ac[cop]["num"]) # workspace on current output
    for (s in geo) { printf("%2s %-6s", geo[s] ":", ac[conid][geo[s]]) }

    print (arg_type ~ /(title_format|class|i3fyracontainer|instance|name|winid)$/ ?
          "| " gensub(/"/,"","g",ac[conid][arg_type]) : "") 
  }

  # example output:
  # * 94548870755248 x: 0     y: 0     w: 1432  h: 220   | A
  # - 94548870641312 x: 0     y: 220   w: 1432  h: 860   | C
}

function find_window(direction,
                     trgx,trgy,
                     aww,awh,awx,awy,
                     wsw,wsh,wsx,wsy,
                     opx,opy,opw,oph,
                     rootx,rooty,rootw,rooth,
                     opid,workspace_id,
                     found,wall)
{
  wsx=ac[active_workspace_id]["x"]; wsy=ac[active_workspace_id]["y"]
  wsw=ac[active_workspace_id]["w"]; wsh=ac[active_workspace_id]["h"]

  awx=ac[active_container_id]["x"]; awy=ac[active_container_id]["y"]
  aww=ac[active_container_id]["w"]; awh=ac[active_container_id]["h"]

  opx=ac[active_output_id]["x"]; opw=ac[active_output_id]["w"]
  opy=ac[active_output_id]["y"]; oph=ac[active_output_id]["h"]

  rootx=ac[container_order[1]]["x"]; rootw=ac[container_order[1]]["w"]
  rooty=ac[container_order[1]]["y"]; rooth=ac[container_order[1]]["h"]

  trgx=(direction == "r" ? awx+aww+arg_gap :
        direction == "l" ? awx-arg_gap     :
        awx+(aww/2)+arg_gap )

  trgy=(direction == "d" ? awy+awh+arg_gap :
        direction == "u" ? awy-arg_gap     :
        awy+(awh/2)-arg_gap )

  found=0
  wall="none"

  if ( (direction == "r" && trgx > wsx+wsw) ||
       (direction == "l" && trgx < wsx) ) {

    wall=(direction == "l" ? "left" : "right")

    # invert direction
    direction=(direction == "l" ? "r" : "l")

    if (focus_wrap == "workspace") {

      trgx=(direction == "r" ? wsx+wsw-arg_gap :
                               wsx+arg_gap)

      wall=wall "-workspace"
    }

    else if ( (direction == "l" && trgx > rootx+rootw) ||
              (direction == "r" && trgx < rootx) ) {

      trgx=(direction == "r" ? rootx+rootw-arg_gap :
                               rootx+arg_gap)

      wall=wall "-area"
    } else
      wall=wall "-workspace"
  }

  else if ( (direction == "u" && trgy < wsy) ||
            (direction == "d" && trgy > wsy+wsh) ) {

    wall=(direction == "u" ? "up" : "down")

    trgy=(direction == "d" ? opy+oph+arg_gap :
          direction == "u" ? opy-arg_gap     :
          awy+(awh/2)-arg_gap )

    # invert direction
    direction=(direction == "u" ? "d" : "u")

    if (focus_wrap == "workspace") {

      trgy=(direction == "d" ? wsy+wsh-arg_gap :
                               wsy+arg_gap )

      wall=wall "-workspace"
    }

    else if ( (direction == "d" && trgy < rooty) ||
              (direction == "u" && trgy > rooty+rooth) ) {

      trgy=(direction == "d" ? rooty+rooth-arg_gap :
                               rooty+arg_gap )

      wall=wall "-area"
    } else 
      wall=wall "-workspace"
  }

  if ( last_direction_id in visible_containers ) {

    # last_direction is set by i3var (a mark)
    # so if it is visible we prioritize focusing that
    # if it is adjacent in target direction

    lwx=ac[last_direction_id]["x"]; lwy=ac[last_direction_id]["y"]
    lww=ac[last_direction_id]["w"]; lwh=ac[last_direction_id]["h"]

    switch (direction) {
      case "d":
      case "u":

        if ( (direction == "d" && lwy < awy+awh) ||
             (direction == "u" && lwy+lwh > awy) )
          break

        if ( is_container_at_pos(last_direction_id, lwx, trgy) &&
           ( is_container_at_pos(active_container_id, lwx, awy) ||
             is_container_at_pos(active_container_id, lwx+lww, awy) ) ) {
          found=last_direction_id
        }
      break

      case "r":
      case "l":

        if ( (direction == "r" && lwx < awx+aww) ||
             (direction == "l" && lwx+lww > awx) )
          break

        if ( is_container_at_pos(last_direction_id, trgx, lwy) &&
           ( is_container_at_pos(active_container_id, awx, lwy) ||
             is_container_at_pos(active_container_id, awx, lwy+lwh) ) ) {
          found=last_direction_id
        }
      break
    }
  }

  if (found == 0 && wall != "none") {
    if (direction ~ /l|r/) {
      for (workspace_id in visible_workspaces) {
        # on each workspace try a temporary target y
        # at the middle of the workspace
        tmpy=ac[workspace_id]["y"]+(ac[workspace_id]["h"]/2)-arg_gap
        # test if this temp y position exist both on
        # the current and active workspace (they are aligned)
        # and that trgx exist on current workspace (its aligned to the left)
        if (  is_container_at_pos(workspace_id, trgx, tmpy) && 
              is_container_at_pos(active_output_id, opx, tmpy)) {
          # if trgy is not on the next output
          # set it at the middle (tmpy)
          if (!is_container_at_pos(workspace_id, trgx, trgy))
            trgy=tmpy

          found=1
          break
        }
      }
      trgx=(found == 1 ? trgx : (direction == "l" ? wsx : wsx+wsw))
    }

    else if (direction ~ /u|d/) {

      # make sure trgy is outside active output
      # and not just the workspace (top|bottombars)
      if (wall ~ /workspace/)
        trgy=(direction == "d" ? opy-arg_gap : opy+oph+arg_gap)

      for (workspace_id in visible_workspaces) {
        output_id=outputs[ac[workspace_id]["output"]]
        # on each workspace try a temporary target x
        # at the middle of the output
        tmpx=ac[output_id]["x"]+(ac[output_id]["w"]/2)+arg_gap

        # test if this temp x position also exist on active output
        # test if both the x and y position exist on current output
        if (  is_container_at_pos(output_id, tmpx, trgy) && 
              is_container_at_pos(active_output_id,tmpx, opy)) {
          # set the target y according to the workspace
          # incase the output has a bottombar
          trgy=(direction == "d" ? 
                  ac[workspace_id]["y"]+ac[workspace_id]["h"]-arg_gap :
                  ac[workspace_id]["y"]+arg_gap )
          
          # if trgx is not on the next workspace
          # set it at the middle (tmpx)
          if (!is_container_at_pos(workspace_id, trgx, trgy))
            trgx=tmpx

          found=1
          break
        }
      }
      trgy=(found == 1 ? trgy : (direction == "d" ? wsy : wsy+wsh))
    }
  }

  print_us["wall"]=wall
  print_us["trgx"]=trgx ; print_us["trgy"]=trgy
  print_us["sx"]=wsx ; print_us["sy"]=wsy
  print_us["sw"]=wsw ; print_us["sh"]=wsh

  if (found > 1)
    return found

  for (conid in visible_containers) {
    if (is_container_at_pos(conid, trgx, trgy))
      return conid
  }
}
function is_container_at_pos(id, x, y,
                             csx,csy,cex,cey) 
{
  # topleft (start) # bottomright (end)
  csy=ac[id]["y"]   ; cey=csy+ac[id]["h"]
  csx=ac[id]["x"]   ; cex=csx+ac[id]["w"]

  return csx <= x && x <= cex && csy <= y && y <= cey
}
function listvis(id,
                 stackh,trg)
{
  # searches container with con_id=id recursevely 
  # for visible containers, add them to the global
  # array: visible_containers
  if ("children" in ac[id]) {
    if (ac[id]["layout"] ~ /tabbed|stacked/) {
      trg=ac[id]["focused"]
      if (ac[id]["layout"] ~ /stacked/) {
        stackh=length(ac[id]["children"])
        ac[trg]["h"]+=(ac[trg]["titlebarheight"]*stackh)
        ac[trg]["y"]-=(ac[trg]["titlebarheight"]*stackh)
      }
      listvis(trg)
      # visible_containers[trg]=trg
    } else if (ac[id]["layout"] ~ /split/) {
      for (trg in ac[id]["children"]) {
        listvis(trg)
      }
    }
  } else if (!ac[id]["floating"]) {
    ac[id]["h"]+=ac[id]["titlebarheight"]
    ac[id]["y"]-=ac[id]["titlebarheight"]
    visible_containers[id]=id
  }
}
$(NF-1) ~ /"(type|output|id|window|name|num|x|floating|marks|layout|focused|instance|class|focus|title_format)"$/ {
  
  key=gensub(/.*"([^"]+)"$/,"\\1","g",$(NF-1))
    
  switch (key) {

    case "layout":
    case "title_format":
    case "class":
    case "instance":
    case "output":
    case "type":
      ac[cid][key]=$NF
    break

    case "name":
      ac[cid][key]=$NF

      # store output container id in separate array
      if ( ac[cid]["type"] ~ /"output"/ &&
           $NF !~ /__i3/)
        outputs[$NF]=cid

    break

    case "id":
      # when "nodes": (or "floating_nodes":) and "id":
      # is on the same record.
      #   example -> "nodes":[{"id":94446734049888 
      # it is the start of a branch in the tree.
      # save the last container_id as current_parent_id
      if ($1 ~ /nodes"$/) {
        current_parent_id=cid
      } else if (NR == 1) {
        root_id=$NF
      }

      # cid, "current id" is the last seen container_id
      cid=$NF
      container_order[++container_count]=cid
    break

    case "x":

      if ($1 ~ /"rect"/) {
        # this will add values to ac[cid]["x"], ac[cid]["y"] ...
        while (1) {
          match($0,/"([^"])[^"]*":([0-9]+)([}])?$/,ma)
          ac[cid][ma[1]]=ma[2]
          if (ma[3] == "}")
            break
          # break before getline, otherwise we will
          # miss the "deco_rect" line..
          getline
        }
      }

      else if ($1 ~ /"deco_rect"/) {
        getline # "x":0
        getline # "y":0
        getline # "width":0
                # "height":0}
        ac[cid]["titlebarheight"]=gensub(/[}]/,"","g",$2)
      } 
      
    break

    case "num":
      ac[cid][key]=$NF
      cwsid=cid # current workspace id
      copid=outputs[ac[cid]["output"]] # current output id
    break

    case "focused":
      if ($NF == "true") {
        active_container_id=cid
        active_workspace_id=cwsid
        active_output_id=copid
      }
      ac[cid]["parent"]=current_parent_id
    break

    case "window":
      if ($NF != "null") {
        ac[cid]["winid"]=$NF
        ac[cid]["i3fyracontainer"]=current_i3fyra_container
      }
    break

    case "marks":
      if (match($2,/"i34(A|B|C|D)"/,ma)) {
        current_i3fyra_container=ma[1]
      }

      # marks set by i3var all are at the root_id.
      # all that are related to i3viswiz has i3viswiz prefix
      else if (cid == root_id) {
        while (1) {
          match($0,/"(i3viswiz)?([^"=]+)=([^"]*)"([]])?$/,ma)

          if (ma[1] == "i3viswiz")
            last_direction_id=ma[3]
          else if (ma[2] == "focus_wrap")
            focus_wrap=ma[3]
          if (ma[4] ~ "]")
            break

          getline
        }
      }
    break

    case "floating":
      if ($NF ~ /_on"$/) {
        ac[cid]["floating"]=1
      }
    break

    case "focus":
      if ($2 != "[]") {
        # a not empty focus list is the first thing
        # we encounter after a branch. The first
        # item of the list is the focused container
        # which is of interest if the container is
        # tabbed or stacked, where only the focused container
        # is visible.
        first_id=gensub(/[^0-9]/,"","g",$2)
        parent_id=ac[first_id]["parent"]
        ac[parent_id]["focused"]=first_id

        # this restores current_parent_id to what
        # it was before branching.
        cid=parent_id
        current_parent_id=ac[parent_id]["parent"]
        
        # workspaces are childs in a special containers
        # named "content", so the focused (first_id) container
        # is a visible workspace (excluding the scratchpad)
        if (ac[parent_id]["name"] ~ /"content"/ &&
            ac[first_id]["name"] !~ /"__i3_scratch"/) {
          visible_workspaces[first_id]=1

          # store the workspace number for current output
          ac[copid]["num"]=ac[first_id]["num"]
        }

        # this just store a list of child container IDs
        # (same as the focus list).
        for (gotarray=0; !gotarray; getline) {
          child=gensub(/[][]/,"","g",$NF)
          ac[parent_id]["children"][child]=1
          gotarray=($NF ~ /[]]$/ ? 1 : 0)
        }

        # if the ACTIVE container is one of the children
        # get the order 
        if (active_container_id in ac[parent_id]["children"]) {

          groupsize=length(ac[parent_id]["children"])

          i=0 ; indx=0
          while (i<groupsize) {
            if (container_order[++indx] in ac[parent_id]["children"]) {
              curry=container_order[indx]

              if (++i==1)
                print_us["firstingroup"]=curry
              if (curry == active_container_id)
                print_us["grouppos"]=i

            }
          }
          
          print_us["lastingroup"]=curry
          print_us["grouplayout"]=ac[parent_id]["layout"]
          print_us["groupid"]=parent_id
          print_us["groupsize"]=groupsize
          getorder=0
        }
      }
    break
  }
}
EOB
}

cleanup() {

  ((__o[verbose])) && ERM "f ${FUNCNAME[0]}()"

  local qflag k s

  ((__o[verbose])) || qflag='-q'

  ((${#_v[@]})) && varset

  [[ -n $_msgstring ]] && i3-msg "${qflag:-}" "$_msgstring"

  ((__o[verbose])) && {
    local delta=$(( ($(date +%s%N)-_stamp) /1000 ))
    local time=$(((delta / 1000) % 1000))
    ERM  "---i3viswiz done: ${time}ms---"
  }
}

set -E
trap '[ "$?" -ne 98 ] || exit 98' ERR

ERX() { >&2 echo  "[ERROR] $*" ; exit 98 ;}
ERR() { >&2 echo  "[WARNING] $*"  ;}
ERM() { >&2 echo  "$*"  ;}
ERH(){
  ___printhelp >&2
  [[ -n "$*" ]] && printf '\n%s\n' "$*" >&2
  exit 98
}


messy() {
  # arguments are valid i3-msg arguments
  # execute all commands at once in cleanup()
  (( __o[verbose] )) && ERM "m $*"
  (( __o[dryrun]  )) || _msgstring+="$*;"
}


declare -A __o
options="$(
  getopt --name "[ERROR]:i3viswiz" \
    --options "g:tficodphv" \
    --longoptions "gap:,title,focus,instance,class,titleformat,winid,parent,json:,debug:,debug-format:,verbose,help,version," \
    -- "$@" || exit 98
)"

eval set -- "$options"
unset options

while true; do
  case "$1" in
    --gap        | -g ) __o[gap]="${2:-}" ; shift ;;
    --title      | -t ) __o[title]=1 ;; 
    --focus      | -f ) __o[focus]=1 ;; 
    --instance   | -i ) __o[instance]=1 ;; 
    --class      | -c ) __o[class]=1 ;; 
    --titleformat | -o ) __o[titleformat]=1 ;; 
    --winid      | -d ) __o[winid]=1 ;; 
    --parent     | -p ) __o[parent]=1 ;; 
    --json       ) __o[json]="${2:-}" ; shift ;;
    --debug      ) __o[debug]="${2:-}" ; shift ;;
    --debug-format ) __o[debug-format]="${2:-}" ; shift ;;
    --verbose    ) __o[verbose]=1 ;; 
    --help       | -h ) ___printhelp && exit ;;
    --version    | -v ) ___printversion && exit ;;
    -- ) shift ; break ;;
    *  ) break ;;
  esac
  shift
done

[[ ${__lastarg:="${!#:-}"} =~ ^--$|${0}$ ]] \
  && __lastarg="" 


main "${@}"


