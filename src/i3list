#!/usr/bin/env bash

___printversion(){
  
cat << 'EOB' >&2
i3list - version: 0.37
updated: 2021-10-16 by budRich
EOB
}



main(){

  : "${_json:=${__o[json]:-$(i3-msg -t get_tree)}}"

  awk -f <(
    echo "
    BEGIN {
      ${__o[instance]:+
        arg_target=\"instance\"
        arg_search[arg_target]=\"${__o[instance]}\"
      }
      ${__o[class]:+
        arg_target=\"class\"
        arg_search[arg_target]=\"${__o[class]}\"
      }
      ${__o[conid]:+
        arg_target=\"id\"
        arg_search[arg_target]=\"${__o[conid]}\"
      }
      ${__o[winid]:+
        arg_target=\"window\"
        arg_search[arg_target]=\"${__o[winid]}\"
      }
      ${__o[mark]:+
        arg_target=\"marks\"
        arg_search[arg_target]=\"${__o[mark]}\"
      }
      ${__o[title]:+
        arg_target=\"name\"
        arg_search[arg_target]=\"${__o[title]}\"
      }
    }"
    awklib
  ) FS=: RS=, <<< "$_json"

  
}

___printhelp(){
  
cat << 'EOB' >&2
i3list - list information about the current i3 session.


SYNOPSIS
--------
i3list [--json JSON]
i3list --instance|-i TARGET [--json JSON]
i3list --class|-c    TARGET [--json JSON]
i3list --conid|-n    TARGET [--json JSON]
i3list --winid|-d    TARGET [--json JSON]
i3list --mark|-m     TARGET [--json JSON]
i3list --title|-t    TARGET [--json JSON]
i3list --help|-h
i3list --version|-v

OPTIONS
-------

--json JSON  
use JSON instead of output from  i3-msg -t
get_tree

--instance|-i TARGET  
Search for windows with a instance matching
TARGET


--class|-c TARGET  
Search for windows with a class matching TARGET


--conid|-n TARGET  
Search for windows with a CON_ID matching TARGET


--winid|-d TARGET  
Search for windows with a WINDOW_ID matching
TARGET


--mark|-m TARGET  
Search for windows with a mark matching TARGET


--title|-t TARGET  
Search for windows with a title matching TARGET  


--help|-h  
Show help and exit.


--version|-v  
Show version and exit.

EOB
}


awklib() {
cat << 'EOB'
function descriptions() {
  
  desc["CAL"]="Container A Layout"
  desc["CAF"]="Container A Focused container id"
  desc["CAW"]="Container A Workspace"
  desc["CBL"]="Container B Layout"
  desc["CBF"]="Container B Focused container id"
  desc["CBW"]="Container B Workspace"
  desc["CCL"]="Container C Layout"
  desc["CCF"]="Container C Focused container id"
  desc["CCW"]="Container C Workspace"
  desc["CDL"]="Container D Layout"
  desc["CDF"]="Container D Focused container id"
  desc["CDW"]="Container D Workspace"

  desc["SAB"]="Current split: AB"
  desc["SAC"]="Current split: AC"
  desc["SBD"]="Current split: BD"
  desc["SCD"]="Current split: CD"
  desc["MAB"]="Stored split: AB"
  desc["MAC"]="Stored split: AC"
  desc["MBD"]="Stored split: BD"
  desc["MCD"]="Stored split: CD"
  desc["FAC"]="Family AC memory"
  desc["FBD"]="Family BD memory"
  desc["FCD"]="Family CD memory"
  desc["FAB"]="Family AB memory"

  desc["LVI"]="Visible i3fyra containers"
  desc["LHI"]="Hidden i3fyra containers"
  desc["LAL"]="All containers in family order"
  desc["LEX"]="Existing containers (LVI+LHI)"

  desc["AWF"]="Active Window floating"
  desc["AWP"]="Active Window parent"
  desc["AWC"]="Active Window con_id"
  desc["AWI"]="Active Window id"
  desc["AFT"]="Active Window twin" 
  desc["AFC"]="Active Window cousin" 
  desc["AFS"]="Active Window sibling" 
  desc["AFF"]="Active Window family" 
  desc["AFO"]="Active Window relatives"
  desc["AWW"]="Active Window width"
  desc["AWH"]="Active Window height"
  desc["AWX"]="Active Window x position"
  desc["AWY"]="Active Window y position"
  desc["AWB"]="Active Window titlebar height"
  desc["ATX"]="Active Window tab x postion"
  desc["ATW"]="Active Window tab width"
  desc["ABW"]="Active Window border width"

  desc["TWF"]="Target Window Floating"
  desc["TWC"]="Target Window con_id"
  desc["TWI"]="Target Window id"
  desc["TWP"]="Target Window Parent container"
  desc["TFT"]="Target Window twin" 
  desc["TFC"]="Target Window cousin" 
  desc["TFS"]="Target Window sibling" 
  desc["TFF"]="Target Window family" 
  desc["TFO"]="Target Window relatives"
  desc["TTX"]="Target Window tab x postion"
  desc["TTW"]="Target Window tab width"
  desc["TWW"]="Target Window width"
  desc["TWH"]="Target Window height"
  desc["TWX"]="Target Window x position"
  desc["TWY"]="Target Window y position"
  desc["TWB"]="Target Window titlebar height"
  desc["TBW"]="Target Window border width"
  
  desc["WAW"]="Active Workspace width"
  desc["WAH"]="Active Workspace height"
  desc["WAX"]="Active Workspace x position"
  desc["WAY"]="Active Workspace y position"
  desc["WAN"]="Active Workspace name"
  desc["WSA"]="Active Workspace number"
  desc["WAI"]="Active Workspace con_id"
  desc["WST"]="Target Workspace Number"
  desc["WTN"]="Target Workspace name"
  desc["WTH"]="Target Workspace Height"
  desc["WTI"]="Target Workspace con_id"
  desc["WTW"]="Target Workspace Width"
  desc["WTX"]="Target Workspace X poistion"
  desc["WTY"]="Target Workspace Y position"
  desc["WSF"]="i3fyra Workspace Number"
  desc["WFH"]="i3fyra Workspace Height"
  desc["WFI"]="i3fyra Workspace con_id"
  desc["WFW"]="i3fyra Workspace Width"
  desc["WFX"]="i3fyra Workspace X position"
  desc["WFY"]="i3fyra Workspace Y position"
  desc["WFN"]="i3fyra Workspace name"

  desc["XAB"]="family AB workspace"
  desc["XAC"]="family AC workspace"
  desc["XCD"]="family CD workspace"
  desc["XBD"]="family BD workspace"

  desc["VPA"]="virtual position A"
  desc["VPB"]="virtual position B"
  desc["VPC"]="virtual position C"
  desc["VPD"]="virtual position D"

  desc["RID"]="root container id"

  desc["ORI"]="i3fyra orientation"
}
END {
  descriptions()

  # strfrm is the format string used for the output
  strfrm="i3list[%s]=%-17s# %s\n"

  # determine target container ID
  if ( !arg_target ) {
    target_container_id=active_container_id
  } else {

    for (suspect_id in suspect_targets) {

      search_match=0

      for (search in arg_search) { 
        if (match(ac[suspect_id][search],arg_search[search]))
          search_match+=1
      }

      if (search_match == length(arg_search)) {
        target_container_id=suspect_id
        break
      }
    }
  }


  # initialize i3fyra values
  if (i3fyra_workspace_id) {
    orientation=("ORI" in fyra_vars ? fyra_vars["ORI"] : "horizontal")
    if (orientation == "horizontal") {
      main_split="AB"
      
      fyra_vars["LAL"]="ACBD"

      # SAB - main split size
      if ("A" in fyra_containers && fyra_containers["A"]["visible"]) {
        main_split_size=ac[fyra_containers["A"]["id"]]["w"]
      }
      else if ("C" in fyra_containers && fyra_containers["C"]["visible"])
        main_split_size=ac[fyra_containers["C"]["id"]]["w"]
      else
        main_split_size=0

      if (main_split_size == ac[i3fyra_workspace_id]["w"])
        main_split_size=0
    }

    else if (orientation == "vertical") {
      main_split="AC"
      
      fyra_vars["LAL"]="ABCD"

      # SAC - main split size
      if ("A" in fyra_containers && fyra_containers["A"]["visible"])
        main_split_size=ac[fyra_containers["A"]["id"]]["h"]
      else if ("B" in fyra_containers && fyra_containers["B"]["visible"])
        main_split_size=ac[fyra_containers["B"]["id"]]["h"]
      else
        main_split_size=0

      if (main_split_size == ac[i3fyra_workspace_id]["h"])
        main_split_size=0
    }
  }

  at["A"]=active_container_id
  at["T"]=target_container_id

  for (target in at) {
    id=at[target]
    if (id) {
      # if its not a con it is probably a workspace
      # dont print window info on that id
      if (ac[id]["type"] == "\"con\"")
      {
        print_window(target,id)
        print ""

        if (i3fyra_workspace_id) {

          parent_id=ac[id]["parent"]
          awp=ac[parent_id]["i3fyra_mark"]
          grand_parent_id=ac[parent_id]["parent"]
          gwp=ac[grand_parent_id]["i3fyra_mark"]

          if (awp) {
            print_fyra_window(target,id,awp)
            print ""
          } else if (gwp) {
            print_fyra_window(target,id,gwp)
            print ""
          }

        }
      }

      if (target == "A" || target_container_id == active_container_id)
        print_workspace(target,active_workspace_id)
      else
        print_workspace(target,ac[id]["workspace"])
      print ""
    }
  }

  ### -- I3FYRA STUFF
  if (i3fyra_workspace_id) {
    print_workspace("F",i3fyra_workspace_id)
    print ""

    for (container_name in fyra_containers) {
      container_id=fyra_containers[container_name]["id"]
      workspace_id=fyra_containers[container_name]["workspace"]

      key="C" container_name "L"; printf(strfrm,key, ac[container_id]["layout"], desc[key])
      key="C" container_name "W"; printf(strfrm,key, ac[workspace_id]["num"], desc[key])

      focused=ac[container_id]["focused"]
      # make sure the focused container is a window
      # while (!("window" in ac[focused]))
      #   focused=ac[focused]["focused"]

      key="C" container_name "F"; printf(strfrm,key, focused, desc[key])

      if (fyra_containers[container_name]["visible"])
        LVI=LVI container_name
      else 
        LHI=LHI container_name
    }
    
    key="LVI"; printf(strfrm,key, LVI, desc[key])
    key="LHI"; printf(strfrm,key, LHI, desc[key])
    key="LEX"; printf(strfrm,key, LVI LHI, desc[key])

    for (family in fyra_splits) {

      first=substr(family,1,1)

      split(family,split_childs,"")
      first_id=fyra_containers[first]["id"]

      if (family == main_split)
        family_split_size = main_split_size

      else if ( orientation == "horizontal"       && 
           fyra_containers[first]["visible"] &&
           ac[first_id]["h"] != ac[i3fyra_workspace_id]["h"] )
        family_split_size=ac[first_id]["h"]

      else if ( orientation == "vertical"         && 
                fyra_containers[first]["visible"] &&
                ac[first_id]["w"] != ac[i3fyra_workspace_id]["w"] )
        family_split_size=ac[first_id]["w"]

      else
        family_split_size=0

      key="S" family; printf(strfrm, key, family_split_size, desc[key])
    }
    # key="S" main_split; printf(strfrm, key, main_split_size, desc[key])

    print ""
    for (key in fyra_vars) {
      printf(strfrm, key, fyra_vars[key], desc[key])
    }
    
  }

  print ""
  printf(strfrm, "RID", root_id, desc["RID"])
}
$(NF-1) ~ /"(current_border_width|type|id|window|name|num|x|floating|marks|layout|focused|instance|class|focus)"$/ {
  
  key=gensub(/.*"([^"]+)"$/,"\\1","g",$(NF-1))
    
  switch (key) {

    case "layout":
    case "type":
    case "current_border_width":
      ac[cid][key]=$NF
    break

    case "class":
    case "instance":
      ac[cid][key]=$NF
      if ( key == arg_target && $NF == "\"" arg_search[key] "\"" )
        suspect_targets[cid]=1
    break

    case "name":
      ac[cid][key]=$NF
      if ( key == arg_target && match($NF, arg_search[key]) )
        suspect_targets[cid]=1

      if (ac[cid]["type"] == "\"workspace\"" && $NF == "\"" i3fyra_workspace_name "\"") {
        i3fyra_workspace_id = cid
      }
    break

    case "id":
      # when "nodes": (or "floating_nodes":) and "id":
      # is on the same record.
      #   example -> "nodes":[{"id":94446734049888 
      # it is the start of a branch in the tree.
      # save the last container_id as current_parent_id
      if ($1 ~ /nodes"$/) {
        current_parent_id=cid
      } else if (NR == 1) {
        root_id=$NF
      }


      # cid, "current id" is the last seen container_id
      cid=$NF
      ac[cid][key]=$NF

      if ( key == arg_target && match($NF, arg_search[key]) )
        suspect_targets[cid]=1
    break

    case "x":

      if ($1 ~ /"(deco_)?rect"/) {
        # this will add values to:
        #   ac[cid]["x"] , ["y"] , ["w"] , ["h"]
        #   ac[cid]["deco_x"] , ["deco_y"] , ["deco_w"] , ["deco_h"]
        keyprefix=($1 ~ /"deco_rect"/ ? "deco_" : "")
        while (1) {

          match($0,/"([^"])[^"]*":([0-9]+)([}])?$/,ma)
          ac[cid][keyprefix ma[1]]=ma[2]
          if (ma[3] ~ "}")
            break
          # break before getline, otherwise we will
          # miss the "deco_rect" line..
          getline
        }
      }

    break

    case "num":
      ac[cid][key]=$NF
      cwsid=cid # current workspace id

      if (cid == i3fyra_workspace_id)
        i3fyra_workspace_num=$NF
    break

    case "focused":
      if ($NF == "true") {
        active_container_id=cid
        if (ac[cid]["type"] == "\"workspace\"")
          active_workspace_id=cid
        else
          active_workspace_id=cwsid
      }
      ac[cid]["workspace"]=cwsid
      ac[cid]["parent"]=current_parent_id
    break

    case "window":
      if ($NF != "null") {
        ac[cid]["window"]=$NF
        if ( key == arg_target && match($NF, arg_search[key]) )
          suspect_targets[cid]=1
      }
    break

    case "floating":
      ac[cid]["floating"]=($NF ~ /_on"$/ ? 1 : 0)
    break

    case "focus":
      if ($2 != "[]") {
        # a not empty focus list is the first thing
        # we encounter after a branch. The first
        # item of the list is the focused container
        # which is of interest if the container is
        # tabbed or stacked, where only the focused container
        # is visible.
        first_id=gensub(/[^0-9]/,"","g",$2)
        parent_id=ac[first_id]["parent"]
        ac[parent_id]["focused"]=first_id

        # this restores current_parent_id  and cid 
        # to what it was before this branch.
        cid=parent_id
        current_parent_id=ac[parent_id]["parent"]
      }
    break

    case "marks":

      if ($NF == "[]")
        break

      ac[cid][key]=$NF

      if ( key == arg_target && match($NF, arg_search[key]) )
        suspect_targets[cid]=1

      else if ( match($NF,/"i34([ABCD])"/,ma) ) {
        fyra_containers[ma[1]]["id"]=cid
        fyra_containers[ma[1]]["workspace"]=cwsid
        ac[cid]["i3fyra_mark"]=ma[1]

        if (ac[cwsid]["num"] != -1) {
          fyra_containers[ma[1]]["visible"]=1
          fyra_containers[ma[1]]["family"]=current_fyra_family
        }
      }

      else if ( match($NF,/"i34X([ABCD]{2})"/,ma) ) {
        fyra_splits[ma[1]]=cid
        current_fyra_family=ma[1]
        fyra_vars["X" ma[1]]=ac[cwsid]["num"]
      }

      # marks set by i3var all are at the root_id.
      # all that are related to i3fyra has i34 prefix
      
      # "marks":["i34MAC=157"
      # "i34MAB=1570"
      # "i34MBD=252"
      # "i34FAC=X"
      # "i34FBD=X"
      # "hidden93845635698816="]
      else if (cid == root_id) {
        while (1) {
          # remove escaped doublequotes so things like
          # i3fyra_ws=\"Control Panel\"  , works
          # as expected.
          gsub(/\\"/,"",$0)
          match($0,/"(i34)?([^"=]+)=([^"]*)"([]])?$/,ma)

          if (ma[2] == "i3fyra_ws") {
            i3fyra_workspace_name=ma[3]
          }
          else if (ma[1] == "i34")
            fyra_vars[ma[2]]=ma[3]
          if (ma[4] ~ "]")
            break

          getline
        }
      }

    break
  }
}
function print_fyra_window(t, container_id, parent, key) {

  key=t "WP"; printf(strfrm,key, parent, desc[key])

  # desc["AFT"]="Active Window twin" 
  key=t "FT"; printf(strfrm,key,
    (parent == "A" ? ( orientation == "horizontal" ? "B" : "C") : 
     parent == "B" ? ( orientation == "horizontal" ? "A" : "D") :
     parent == "C" ? ( orientation == "horizontal" ? "D" : "A") :
     parent == "D" ? ( orientation == "horizontal" ? "C" : "B") : 0),
    desc[key])

  # desc["AFC"]="Active Window cousin" 
  key=t "FC"; printf(strfrm,key,
    (parent == "A" ? "D" : 
     parent == "B" ? "C" :
     parent == "C" ? "B" :
     parent == "D" ? "A" : 0),
    desc[key])

  # desc["AFS"]="Active Window sibling" 
  key=t "FS"; printf(strfrm,key,
    (parent == "A" ? ( orientation == "horizontal" ? "C" : "B") : 
     parent == "B" ? ( orientation == "horizontal" ? "D" : "A") :
     parent == "C" ? ( orientation == "horizontal" ? "A" : "D") :
     parent == "D" ? ( orientation == "horizontal" ? "B" : "C") : 0),
    desc[key])

  # desc["AFF"]="Active Window family"
  key=t "FF"; printf(strfrm,key,
    (parent == "A" ? ( orientation == "horizontal" ? "AC" : "AB") : 
     parent == "B" ? ( orientation == "horizontal" ? "BD" : "AB") :
     parent == "C" ? ( orientation == "horizontal" ? "AC" : "CD") :
     parent == "D" ? ( orientation == "horizontal" ? "BD" : "CD") : 0),
    desc[key])

  # desc["AFO"]="Active Window relatives"
  key=t "FO"; printf(strfrm,key,
    (parent == "A" ? ( orientation == "horizontal" ? "BD" : "CD") : 
     parent == "B" ? ( orientation == "horizontal" ? "AC" : "CD") :
     parent == "C" ? ( orientation == "horizontal" ? "BD" : "AB") :
     parent == "D" ? ( orientation == "horizontal" ? "AC" : "AB") : 0),
    desc[key])
}
function print_window(t, container_id, key) {
  key=t "WC"; printf(strfrm,key, container_id, desc[key])
  key=t "WF"; printf(strfrm,key, ac[container_id]["floating"], desc[key])
  key=t "WI"; printf(strfrm,key, ac[container_id]["window"], desc[key])
  key=t "WW"; printf(strfrm,key, ac[container_id]["w"], desc[key])
  key=t "WH"; printf(strfrm,key, ac[container_id]["h"]+ac[container_id]["deco_h"], desc[key])
  key=t "WX"; printf(strfrm,key, ac[container_id]["x"], desc[key])
  key=t "WY"; printf(strfrm,key, ac[container_id]["y"]-ac[container_id]["deco_h"], desc[key])
  key=t "WB"; printf(strfrm,key, ac[container_id]["deco_h"], desc[key])
  key=t "TX"; printf(strfrm,key, ac[container_id]["deco_x"], desc[key])
  key=t "TW"; printf(strfrm,key, ac[container_id]["deco_w"], desc[key])
  key=t "BW"; printf(strfrm,key, ac[container_id]["current_border_width"], desc[key])
}

function print_workspace(t, container_id, key) {
  key="W" t "I"; printf(strfrm,key, container_id, desc[key])
  key="W" t "X"; printf(strfrm,key, ac[container_id]["x"], desc[key])
  key="W" t "Y"; printf(strfrm,key, ac[container_id]["y"], desc[key])
  key="W" t "W"; printf(strfrm,key, ac[container_id]["w"], desc[key])
  key="W" t "H"; printf(strfrm,key, ac[container_id]["h"], desc[key])

  
  key="W" t "N"; printf(strfrm,key, ac[container_id]["name"], desc[key])
  key="WS" t   ; printf(strfrm,key, ac[container_id]["num"], desc[key])
}
EOB
}

set -E
trap '[ "$?" -ne 98 ] || exit 98' ERR

ERX() { echo  "[ERROR] $*" >&2 ; exit 98 ;}
ERR() { echo  "[WARNING] $*" >&2 ;}
ERM() { echo  "$*" >&2 ;}


declare -A __o
options="$(
  getopt --name "[ERROR]:i3list" \
    --options "i:c:n:d:m:t:hv" \
    --longoptions "json:,instance:,class:,conid:,winid:,mark:,title:,help,version," \
    -- "$@" || exit 98
)"

eval set -- "$options"
unset options

while true; do
  case "$1" in
    --json       ) __o[json]="${2:-}" ; shift ;;
    --instance   | -i ) __o[instance]="${2:-}" ; shift ;;
    --class      | -c ) __o[class]="${2:-}" ; shift ;;
    --conid      | -n ) __o[conid]="${2:-}" ; shift ;;
    --winid      | -d ) __o[winid]="${2:-}" ; shift ;;
    --mark       | -m ) __o[mark]="${2:-}" ; shift ;;
    --title      | -t ) __o[title]="${2:-}" ; shift ;;
    --help       | -h ) ___printhelp && exit ;;
    --version    | -v ) ___printversion && exit ;;
    -- ) shift ; break ;;
    *  ) break ;;
  esac
  shift
done

[[ ${__lastarg:="${!#:-}"} =~ ^--$|${0}$ ]] \
  && __lastarg="" 


main "${@}"


