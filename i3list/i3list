#!/bin/bash

NAME="i3lst"
VERSION="0.001"
AUTHOR="budRich"
CONTACT='robstenklippa@gmail.com'
CREATED="2018-05-12"
UPDATED="2018-05-12"

main(){
  while getopts :c:i:n:d:vh option; do
    case "${option}" in

      i) crit="\"instance\"" srch="${OPTARG}" ;;
      c) crit="\"class\""    srch="${OPTARG}" ;;
      n) crit="\"id\""       srch="${OPTARG}" ;;
      d) crit="\"window\""   srch="${OPTARG}" ;;

      v) printf '%s\n' \
           "$NAME - version: $VERSION" \
           "updated: $UPDATED by $AUTHOR"
         exit ;;
      h|*) printinfo && exit ;;
    esac
  done

  [ -z "$crit" ] && crit="X" && srch="X"
  declare -A i3list

  # eval "$(printlist)"
  # echo "${i3list[WSF]}"
  printlist
}

printlist(){
  i3-msg -t get_tree | awk -v RS=',' -F':' \
    -v crit="${crit}" -v srch="${srch}" \
    '
    BEGIN{
      act=0;trg=0;hit=0
      if(crit=="X"){trg=2}

      # variable descriptions:
      desc["WSF"]="workspace i3fyra number"
      desc["WSW"]="workspace i3fyra width"
      desc["WSH"]="workspace i3fyra height"
      desc["WSA"]="workspace number active"
      desc["AWF"]="active window floating"
      desc["AWP"]="active window parent"
      desc["AWC"]="active window con_id"
      desc["AWI"]="active window id"
      desc["WST"]="workspace number target"
      desc["TWF"]="target window floating"
      desc["TWC"]="target window con_id"
      desc["TWI"]="target window id"
      desc["TWP"]="target window parent"
      desc["CAS"]="container A status"
      desc["CAL"]="container A layout"
      desc["CAF"]="container A focused container id"
      desc["CBS"]="container B status"
      desc["CBL"]="container B layout"
      desc["CBF"]="container B focused container id"
      desc["CCS"]="container C status"
      desc["CCL"]="container C layout"
      desc["CCW"]="container C workspace"
      desc["CAW"]="container A workspace"
      desc["CBW"]="container B workspace"
      desc["CDW"]="container D workspace"
      desc["CCF"]="container C focused container id"
      desc["CDS"]="container D status"
      desc["CDL"]="container D layout"
      desc["CDF"]="container D focused container id"
      desc["SAB"]="current split: AB"
      desc["SAC"]="current split: AC"
      desc["SBD"]="current split: BD"
      desc["MAB"]="stored split: AB"
      desc["MAC"]="stored split: AC"
      desc["MBD"]="stored split: BD"
      desc["FAC"]="Family AC memory"
      desc["FBD"]="Family BD memory"
      desc["LVI"]="visible i3fyra containers"
      desc["LHI"]="hidden i3fyra containers"
      desc["LAL"]="all containers in family order"
      desc["LEX"]="existing containers (LVI+LHI)"
      desc["AFT"]="active window twin" 
      desc["AFC"]="active window cousin" 
      desc["AFS"]="active window sibling" 
      desc["AFF"]="active window family" 
      desc["AFO"]="active window relatives"
      desc["TFT"]="target window twin" 
      desc["TFC"]="target window cousin" 
      desc["TFS"]="target window sibling" 
      desc["TFF"]="target window family" 
      desc["TFO"]="target window relatives"


      defaults["LD1"]="A"
      defaults["LD2"]="B"
      defaults["LD3"]="C"
      defaults["LD4"]="D"
    }

    hit!=0 && $0~"{" {hit++}
    hit!=0 && $0~"}" {hit--}
    hit!=0 && $1=="\"focus\"" {
      gsub("[[]|[]]","",$2)
      container["C"curcon"F"]=$2
    }

    $1=="\"window\"" {curwid=$2}

    $1=="\"num\"" && $2!="-1" {
      curws=$2
      if(workspace["WSF"]=="chk"){
        workspace["WSF"]=curws}
      if (wsdchk=="2") {
        dim[curws]["w"]=dim["w"]
        dim[curws]["h"]=dim["h"]
        wsdchk="0"
      }
    }

    $1~"{\"id\"" || $2~"\"id\"" {
      if(trg=="0" || act=="0"){curcid=$NF}
      if(hit!=0){
        conta[curcon]["childs"]=conta[curcon]["childs"] $NF " "
        conta[curcon]["id"]=curcid
      }
    }

    $1~"{\"id\"" || $2~"\"id\"" {curcid=$NF}

    trg==0 && $(NF-1) ~ crit && $NF ~ srch {
      target["TWC"]=curcid
      workspace["WST"]=curws
      trg=1
    }

    act==0 && $1=="\"focused\"" && $2=="true" {
      active["AWC"]=curcid
      workspace["WSA"]=curws
      act=1
    }

    # splits
    abchk=="1" && $1=="\"width\""  {splits["SAB"]=$2;abchk=0}
    acchk=="1" && $1=="\"height\"" {gsub("}","",$2);splits["SAC"]=$2;acchk=0}
    bdchk=="1" && $1=="\"height\"" {gsub("}","",$2);splits["SBD"]=$2;bdchk=0}

    # workspace dimensions
    $1=="\"type\"" && $2=="\"workspace\"" {wsdchk="1"}
    wsdchk=="1" && $1=="\"width\""  {dim["w"]=$2}
    wsdchk=="1" && $1=="\"height\"" {gsub("}","",$2);dim["h"]=$2;wsdchk="2"}

    $1=="\"floating\"" {

      if(curcid == active["AWC"] && act != 2){
        active["AWF"]=0
        active["AWI"]=curwid
        if($2~"on"){active["AWF"]=1}
        if(curcid == conta[curcon]["id"]){
          active["AWP"]=curcon

          switch (curcon) {
            case "A" :
              active["AFT"]="B" 
              active["AFC"]="D" 
              active["AFS"]="C" 
              active["AFF"]="AC" 
              active["AFO"]="BD"
            break

            case "B" :
              active["AFT"]="A" 
              active["AFC"]="C" 
              active["AFS"]="D" 
              active["AFF"]="BD" 
              active["AFO"]="AC"
            break

            case "C" :
              active["AFT"]="D" 
              active["AFC"]="B" 
              active["AFS"]="A" 
              active["AFF"]="AC" 
              active["AFO"]="BD"
            break

            case "D" :
              active["AFT"]="C" 
              active["AFC"]="A" 
              active["AFS"]="B" 
              active["AFF"]="BD" 
              active["AFO"]="AC"
            break
          } 

        }
        act=2
      }

      if(curcid == target["TWC"] && trg != 2){
        target["TWF"]=0
        target["TWI"]=curwid
        if($2~"on"){target["TWF"]=1}
        if(curcid == conta[curcon]["id"]){
          target["TWP"]=curcon

          switch (curcon) {
            case "A" :
              target["TFT"]="B" 
              target["TFC"]="D" 
              target["TFS"]="C" 
              target["TFF"]="AC" 
              target["TFO"]="BD"
            break

            case "B" :
              target["TFT"]="A" 
              target["TFC"]="C" 
              target["TFS"]="D" 
              target["TFF"]="BD" 
              target["TFO"]="AC"
            break

            case "C" :
              target["TFT"]="D" 
              target["TFC"]="B" 
              target["TFS"]="A" 
              target["TFF"]="AC" 
              target["TFO"]="BD"
            break

            case "D" :
              target["TFT"]="C" 
              target["TFC"]="A" 
              target["TFS"]="B" 
              target["TFF"]="BD" 
              target["TFO"]="AC"
            break
          }

        }
        trg=2
      }

    }

    $1=="\"marks\"" {
      gsub("[[]|[]]|\"","",$2);
      for (m in defaults) {
        if("i34" defaults[m] == $2){
          hit=1
          curcon=defaults[m]
          container["C"curcon"W"]=curws
          container["C"curcon"L"]="-"
        }
      }

      cmrk=$2

      if($2~"i34XAB"){
        workspace["WSF"]="chk"
        workspace["allal"]=curws
      }

      if($2~"i34SAB"){
        split($2,asplt,"=")
        splits["MAB"]=asplt[2]
      }
      if($2~"i34SAC"){
        split($2,asplt,"=")
        splits["MAC"]=asplt[2]
      }
      if($2~"i34SBD"){
        split($2,asplt,"=")
        splits["MBD"]=asplt[2]
      }
      if($2~"i34FAC"){
        split($2,asplt,"=")
        family["FAC"]=asplt[2]
      }
      if($2~"i34FBD"){
        split($2,asplt,"=")
        family["FBD"]=asplt[2]
      }

      if($2=="i34XAC") {abchk=1}
      if($2=="i34A")   {acchk=1}
      if($2=="i34B")   {bdchk=1}
    }

    hit!=0 && $1=="\"layout\"" && container["C"curcon"L"]=="-" {
      container["C"curcon"L"]=$2
    }

    END{
      stringformat="i3list[%s]=%-15s\t# %s\n"

      for(k in active){
        printf(stringformat, k, active[k], desc[k])
        tk=k;sub("A","T",tk)
        if (!target[tk] && crit == "X") {
          target[tk]=active[k]}
      }

      if (!workspace["WST"] && crit == "X") {workspace["WST"] = workspace["WSA"]}

      if (target["TWC"]){
        for(k in target){
          printf(stringformat, k, target[k], desc[k])
        }
      } 

      if (workspace["WSF"]){
        workspace["WSW"]=dim[workspace["WSF"]]["w"]
        workspace["WSH"]=dim[workspace["WSF"]]["h"]

        for(k in container){
          printf(stringformat, k, container[k], desc[k])
        }

        for(k in defaults){

          if (container["C" defaults[k] "W"]){
            if (container["C" defaults[k] "W"] == workspace["WSF"]){
              layout["LVI"]=defaults[k] layout["LVI"]
            } else {
              layout["LHI"]=defaults[k] layout["LHI"]
            }
          }

        }


        layout["LEX"]=layout["LVI"] layout["LHI"]
        

        for(k in splits){
          printf(stringformat, k, splits[k], desc[k])
        }

        for(k in family){
          printf(stringformat, k, family[k], desc[k])
        }
      }

      layout["LAL"]="ACBD"

      for(k in layout){
        printf(stringformat, k, layout[k], desc[k])
      }

      for(k in workspace){
        printf(stringformat, k, workspace[k], desc[k])
      }
    }

    '
}

printinfo(){
  case "$1" in
    m ) printf '%s' "${about}" ;;
    
    f ) 
      printf '%s' "${bouthead}"
      printf '%s' "${about}"
      printf '%s' "${boutfoot}"
    ;;

    ''|* ) 
      printf '%s' "${about}" | awk '
         BEGIN{ind=0}
         $0~/^```/{
           if(ind!="1"){ind="1"}
           else{ind="0"}
           print ""
         }
         $0!~/^```/{
           gsub("[`*]","",$0)
           if(ind=="1"){$0="   " $0}
           print $0
         }
       '
    ;;
  esac
}

bouthead="
${NAME^^} 1 ${CREATED} Linux \"User Manuals\"
=======================================

NAME
----
"

boutfoot="
AUTHOR
------

${AUTHOR} <${CONTACT}>
<https://budrich.github.io>

SEE ALSO
--------

bar(1), foo(5), xyzzy(1), [Linux Man Page Howto](
http://www.schweikhardt.net/man_page_howto.html)
"

about='
`i3lst` - Short description

SYNOPSIS
--------

`i3lst` [`-v`|`-h`] [`-c` *config-file*] *file* ...

DESCRIPTION
-----------

`i3lst` frobnicates the bar library by tweaking internal symbol tables. By
defaults it parses all baz segments and rearranges them in reverse order by
time for the xyzzy(1) linker to find them. The symdef entry is then compressed
using the WBG (Whiz-Bang-Gizmo) algorithm. All files are processed in the
order specified.

OPTIONS
-------

`-v`
  Show version and exit.

`-h`
  Show help and exit.

`-c` *config-file*
  Use the alternate system wide *config-file* instead of */etc/foo.conf*. This
  overrides any `FOOCONF` environment variable.


FILES
-----

*/etc/foo.conf*
  The system wide configuration file. See foo(5) for further details.

*~/.foorc*
  Per user configuration file. See foo(5) for further details.

ENVIRONMENT
-----------

`FOOCONF`
  If non-null the full pathname for an alternate system wide */etc/foo.conf*.
  Overridden by the `-c` option.

DEPENDENCIES
------------

go-md2man
i3get
Sublime Text
'

if [ "$1" = "md" ]; then
  printinfo m
  exit
elif [ "$1" = "man" ]; then
  printinfo f
  exit
else
  main "${@}"
fi
